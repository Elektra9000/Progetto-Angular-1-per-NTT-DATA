{
  "version": 3,
  "sources": ["src/app/components/auth/login/login.component.ts", "src/app/components/auth/login/login.component.html", "src/app/components/layout/layout.component.ts", "src/app/components/layout/layout.component.html", "src/app/app.routes.ts", "src/app/app.config.ts", "src/app/app.component.ts", "src/app/app.component.html", "src/app/interceptors/core/auth.interceptor.ts", "src/main.ts"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MATERIAL } from '../../../material/material.module';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, MATERIAL],\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent {\r\n  tokenControl = new FormControl('', { validators: [Validators.required], nonNullable: true });\r\n\r\n  private router = inject(Router);\r\n\r\n  enter(): void {\r\n    if (this.tokenControl.invalid) return;\r\n    const token = (this.tokenControl.value as string).trim();\r\n    sessionStorage.setItem('gorest_token', token);\r\n    this.router.navigate(['/home']);\r\n  }\r\n}\r\n", "<div class=\"login-wrapper\">\r\n  <section class=\"login-card\">\r\n    <h1 class=\"logo\">GlowUp</h1>\r\n    <p class=\"tagline\">the future is now!</p>\r\n\r\n    <label class=\"label\" for=\"token\">login</label>\r\n    <input\r\n      id=\"token\"\r\n      [formControl]=\"tokenControl\"\r\n      type=\"text\"\r\n      placeholder=\"Insert token\"\r\n      class=\"token-input\"\r\n      aria-describedby=\"tokenHelp\"\r\n    />\r\n    <div id=\"tokenHelp\" class=\"field-help\" *ngIf=\"tokenControl.invalid && tokenControl.touched\">\r\n      <span *ngIf=\"tokenControl.hasError('required')\">Token is required.</span>\r\n    </div>\r\n\r\n    <button (click)=\"enter()\" [disabled]=\"tokenControl.invalid\" class=\"enter-btn\">\r\n      enter\r\n    </button>\r\n  </section>\r\n</div>\r\n", "import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet, Router } from '@angular/router';\r\nimport { MATERIAL } from '../../material/material.module';\r\n\r\n@Component({\r\n  selector: 'app-layout',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet, MATERIAL],\r\n  templateUrl: './layout.component.html',\r\n  styleUrls: ['./layout.component.css']\r\n})\r\nexport class LayoutComponent {\r\n  private router = inject(Router);\r\n\r\n  logout(): void {\r\n    sessionStorage.removeItem('gorest_token');\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n", "<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #drawer class=\"mobile-menu\" mode=\"over\" aria-label=\"Mobile menu\">\r\n    <div class=\"mobile-menu-content\">\r\n      <button\r\n        mat-button\r\n        class=\"label\"\r\n        routerLink=\"/home\"\r\n        routerLinkActive=\"active\"\r\n        [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        (click)=\"drawer.close()\"\r\n      >\r\n        Home\r\n      </button>\r\n      <button\r\n        mat-button\r\n        class=\"label\"\r\n        routerLink=\"/posts\"\r\n        routerLinkActive=\"active\"\r\n        [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        (click)=\"drawer.close()\"\r\n      >\r\n        Posts\r\n      </button>\r\n      <button\r\n        mat-button\r\n        class=\"label\"\r\n        routerLink=\"/proponents\"\r\n        routerLinkActive=\"active\"\r\n        [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        (click)=\"drawer.close()\"\r\n      >\r\n        Proponents\r\n      </button>\r\n      <button\r\n        mat-button\r\n        class=\"label\"\r\n        routerLink=\"/search\"\r\n        routerLinkActive=\"active\"\r\n        [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        (click)=\"drawer.close()\"\r\n      >\r\n        Search\r\n      </button>\r\n      <button mat-button class=\"label\" (click)=\"logout(); drawer.close()\" aria-label=\"Logout\">\r\n        <mat-icon>logout</mat-icon>\r\n      </button>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <nav class=\"navbar\" role=\"navigation\" aria-label=\"Main navigation\">\r\n      <div class=\"nav-left desktop-only\" role=\"menubar\">\r\n        <button\r\n          mat-button\r\n          class=\"label\"\r\n          routerLink=\"/home\"\r\n          routerLinkActive=\"active\"\r\n          [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        >\r\n          Home\r\n        </button>\r\n        <button\r\n          mat-button\r\n          class=\"label\"\r\n          routerLink=\"/posts\"\r\n          routerLinkActive=\"active\"\r\n          [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        >\r\n          Posts\r\n        </button>\r\n        <button\r\n          mat-button\r\n          class=\"label\"\r\n          routerLink=\"/proponents\"\r\n          routerLinkActive=\"active\"\r\n          [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        >\r\n          Proponents\r\n        </button>\r\n        <button\r\n          mat-button\r\n          class=\"label\"\r\n          routerLink=\"/search\"\r\n          routerLinkActive=\"active\"\r\n          [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"nav-right\">\r\n        <button\r\n          mat-icon-button\r\n          class=\"menu-button mobile-only\"\r\n          (click)=\"drawer.toggle()\"\r\n          aria-label=\"Menu\"\r\n        >\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n\r\n        <button mat-icon-button aria-label=\"Logout\" class=\"desktop-only\" (click)=\"logout()\">\r\n          <mat-icon>logout</mat-icon>\r\n        </button>\r\n      </div>\r\n    </nav>\r\n\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n", "import { provideRouter } from '@angular/router';\r\nimport { LoginComponent } from './components/auth/login/login.component';\r\nimport { LayoutComponent } from './components/layout/layout.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: LoginComponent },\r\n  {\r\n    path: '',\r\n    component: LayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'home',\r\n        loadChildren: () =>\r\n          import('./components/home/services/home.routes').then(m => m.routes),\r\n      },\r\n      {\r\n        path: 'posts',\r\n        loadChildren: () =>\r\n          import('./components/posts/services/posts.routes').then(m => m.routes),\r\n      },\r\n      {\r\n        path: 'proponents',\r\n        loadChildren: () =>\r\n          import('./components/proponents/services/proponents.routes').then(m => m.routes),\r\n      },\r\n      {\r\n        path: 'search',\r\n        loadChildren: () =>\r\n          import('./components/search/services/search.routes').then(m => m.routes),\r\n      },\r\n    ],\r\n  },\r\n  { path: '**', redirectTo: '' },\r\n];\r\n\r\nexport const appRouterProviders = [provideRouter(routes)];\r\n", "import { ApplicationConfig } from '@angular/core';\r\nimport { provideHttpClient } from '@angular/common/http';\r\nimport { provideRouter } from '@angular/router';\r\nimport { routes } from './app.routes';\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [\r\n    provideHttpClient(),\r\n    provideRouter(routes),\r\n  ]\r\n};\r\n", "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'progetto-angular-1';\r\n}\r\n", "<router-outlet></router-outlet>\r\n", "import { HttpInterceptorFn } from '@angular/common/http';\r\nimport { HttpRequest, HttpHandlerFn, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError, Observable } from 'rxjs';\r\n\r\nexport const authInterceptor: HttpInterceptorFn = (\r\n  req: HttpRequest<unknown>,\r\n  next: HttpHandlerFn\r\n): Observable<HttpEvent<unknown>> => {\r\n  const token = sessionStorage.getItem('gorest_token') || '';\r\n  const cloned = token\r\n    ? req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n    : req;\r\n\r\n  return next(cloned).pipe(\r\n    catchError((err: unknown) => {\r\n      if (err instanceof HttpErrorResponse && (err.status === 401 || err.status === 403)) {\r\n        sessionStorage.removeItem('gorest_token');\r\n      }\r\n      return throwError(() => err);\r\n    })\r\n  );\r\n};\r\n", "import { bootstrapApplication } from '@angular/platform-browser';\r\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\r\nimport { appConfig } from './app/app.config';\r\nimport { AppComponent } from './app/app.component';\r\nimport { authInterceptor } from './app/interceptors/core/auth.interceptor';\r\n\r\nbootstrapApplication(AppComponent, {\r\n  ...appConfig,\r\n  providers: [\r\n    ...appConfig.providers,\r\n    provideHttpClient(\r\n      withInterceptors([\r\n        authInterceptor\r\n      ])\r\n    ),\r\n  ],\r\n}).catch((err) => console.error(err));\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275template", "LoginComponent_div_9_span_1_Template", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "tokenControl", "hasError", "LoginComponent", "FormControl", "validators", "Validators", "required", "nonNullable", "router", "inject", "Router", "enter", "invalid", "token", "value", "trim", "sessionStorage", "setItem", "navigate", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "LoginComponent_div_9_Template", "\u0275\u0275listener", "touched", "CommonModule", "NgIf", "ReactiveFormsModule", "DefaultValueAccessor", "NgControlStatus", "FormControlDirective", "MatToolbarModule", "MatButtonModule", "MatSidenavModule", "MatIconModule", "MatInputModule", "MatProgressSpinnerModule", "RouterModule", "styles", "LayoutComponent", "router", "inject", "Router", "logout", "sessionStorage", "removeItem", "navigate", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "drawer_r2", "\u0275\u0275reference", "\u0275\u0275resetView", "close", "\u0275\u0275text", "\u0275\u0275elementEnd", "toggle", "i0", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "CommonModule", "RouterOutlet", "MatToolbarModule", "MatButtonModule", "MatButton", "MatIconButton", "MatSidenavModule", "MatSidenav", "MatSidenavContainer", "MatSidenavContent", "MatIconModule", "MatIcon", "MatInputModule", "MatProgressSpinnerModule", "ReactiveFormsModule", "RouterModule", "RouterLink", "RouterLinkActive", "styles", "routes", "path", "component", "LoginComponent", "LayoutComponent", "children", "loadChildren", "then", "m", "redirectTo", "appRouterProviders", "provideRouter", "appConfig", "providers", "provideHttpClient", "provideRouter", "routes", "AppComponent", "title", "selectors", "decls", "vars", "template", "rf", "ctx", "\u0275\u0275element", "RouterOutlet", "encapsulation", "authInterceptor", "req", "next", "token", "sessionStorage", "getItem", "cloned", "clone", "setHeaders", "Authorization", "pipe", "catchError", "err", "HttpErrorResponse", "status", "removeItem", "throwError", "bootstrapApplication", "AppComponent", "__spreadProps", "__spreadValues", "appConfig", "providers", "provideHttpClient", "withInterceptors", "authInterceptor", "catch", "err", "console", "error"]
}
