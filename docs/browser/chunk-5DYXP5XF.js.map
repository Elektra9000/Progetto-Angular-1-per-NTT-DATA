{
  "version": 3,
  "sources": ["src/app/services/api.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Post, PostComment } from '../models/models';\r\n\r\nexport interface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  gender: 'male' | 'female';\r\n  status: 'active' | 'inactive';\r\n  role?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n  private base = 'https://gorest.co.in/public/v2';\r\n  private http = inject(HttpClient);\r\n\r\n  getUsers(): Observable<User[]> {\r\n    return this.http.get<User[]>(`${this.base}/users`);\r\n  }\r\n\r\n  getPosts(): Observable<Post[]> {\r\n    return this.http.get<Post[]>(`${this.base}/posts`);\r\n  }\r\n\r\n  getCommentsByPost(postId: number): Observable<PostComment[]> {\r\n    return this.http.get<PostComment[]>(\r\n      `${this.base}/posts/${postId}/comments`\r\n    );\r\n  }\r\n\r\n  getComments(): Observable<PostComment[]> {\r\n    return this.http.get<PostComment[]>(`${this.base}/comments`);\r\n  }\r\n\r\n  getTodos(): Observable<unknown[]> {\r\n    return this.http.get<unknown[]>(`${this.base}/todos`);\r\n  }\r\n\r\n  createPost(post: Partial<Post>): Observable<Post> {\r\n    return this.http.post<Post>(`${this.base}/posts`, post);\r\n  }\r\n\r\n  createComment(\r\n    postId: number,\r\n    comment: Partial<PostComment>\r\n  ): Observable<PostComment> {\r\n    return this.http.post<PostComment>(\r\n      `${this.base}/posts/${postId}/comments`,\r\n      comment\r\n    );\r\n  }\r\n\r\n  createReply(\r\n    postId: number,\r\n    parentId: number,\r\n    reply: Partial<PostComment>\r\n  ): Observable<PostComment> {\r\n    return this.http.post<PostComment>(`${this.base}/comments`, {\r\n      ...reply,\r\n      post_id: postId,\r\n      parent_id: parentId,\r\n    });\r\n  }\r\n\r\n  updatePost(\r\n    id: number,\r\n    payload: { title: string; body: string }\r\n  ): Observable<Post | null> {\r\n    const token = sessionStorage.getItem('gorest_token');\r\n    if (!token) {\r\n      console.warn('No token found in sessionStorage');\r\n      return of(null);\r\n    }\r\n\r\n    return this.http.patch<Post>(`${this.base}/posts/${id}`, payload, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "4EAeA,IAAaA,GAAU,IAAA,CAAjB,MAAOA,CAAU,CACbC,KAAO,iCACPC,KAAOC,EAAOC,CAAU,EAEhCC,UAAQ,CACN,OAAO,KAAKH,KAAKI,IAAY,GAAG,KAAKL,IAAI,QAAQ,CACnD,CAEAM,UAAQ,CACN,OAAO,KAAKL,KAAKI,IAAY,GAAG,KAAKL,IAAI,QAAQ,CACnD,CAEAO,kBAAkBC,EAAc,CAC9B,OAAO,KAAKP,KAAKI,IACf,GAAG,KAAKL,IAAI,UAAUQ,CAAM,WAAW,CAE3C,CAEAC,aAAW,CACT,OAAO,KAAKR,KAAKI,IAAmB,GAAG,KAAKL,IAAI,WAAW,CAC7D,CAEAU,UAAQ,CACN,OAAO,KAAKT,KAAKI,IAAe,GAAG,KAAKL,IAAI,QAAQ,CACtD,CAEAW,WAAWC,EAAmB,CAC5B,OAAO,KAAKX,KAAKW,KAAW,GAAG,KAAKZ,IAAI,SAAUY,CAAI,CACxD,CAEAC,cACEL,EACAM,EAA6B,CAE7B,OAAO,KAAKb,KAAKW,KACf,GAAG,KAAKZ,IAAI,UAAUQ,CAAM,YAC5BM,CAAO,CAEX,CAEAC,YACEP,EACAQ,EACAC,EAA2B,CAE3B,OAAO,KAAKhB,KAAKW,KAAkB,GAAG,KAAKZ,IAAI,YAAakB,EAAAC,EAAA,GACvDF,GADuD,CAE1DG,QAASZ,EACTa,UAAWL,GACZ,CACH,CAEAM,WACEC,EACAC,EAAwC,CAExC,IAAMC,EAAQC,eAAeC,QAAQ,cAAc,EACnD,OAAKF,EAKE,KAAKxB,KAAK2B,MAAY,GAAG,KAAK5B,IAAI,UAAUuB,CAAE,GAAIC,EAAS,CAChEK,QAAS,CACPC,cAAe,UAAUL,CAAK,IAEjC,GARCM,QAAQC,KAAK,kCAAkC,EACxCC,EAAG,IAAI,EAQlB,4CAnEWlC,EAAU,6BAAVA,EAAUmC,QAAVnC,EAAUoC,UAAAC,WADG,MAAM,CAAA,SACnBrC,CAAU,GAAA",
  "names": ["ApiService", "base", "http", "inject", "HttpClient", "getUsers", "get", "getPosts", "getCommentsByPost", "postId", "getComments", "getTodos", "createPost", "post", "createComment", "comment", "createReply", "parentId", "reply", "__spreadProps", "__spreadValues", "post_id", "parent_id", "updatePost", "id", "payload", "token", "sessionStorage", "getItem", "patch", "headers", "Authorization", "console", "warn", "of", "factory", "\u0275fac", "providedIn"]
}
