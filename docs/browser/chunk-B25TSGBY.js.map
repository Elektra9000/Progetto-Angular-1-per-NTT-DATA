{
  "version": 3,
  "sources": ["../k8-fastbuild-ST-46c76129e412/bin/src/cdk/portal/portal-errors.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/portal/portal.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/portal/dom-portal-outlet.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/portal/portal-directives.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/layout/layout-module.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/layout/breakpoints.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/scroll/block-scroll-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/scroll/scroll-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/scroll/close-scroll-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/scroll/noop-scroll-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/position/scroll-clip.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/scroll/reposition-scroll-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/scroll/scroll-strategy-options.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/overlay-config.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/position/connected-position.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/overlay-container.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/backdrop-ref.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/overlay-ref.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/position/flexible-connected-position-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/position/global-position-strategy.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/position/overlay-position-builder.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/overlay.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/overlay-directives.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/cdk/overlay/overlay-module.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar-ref.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar-config.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar-content.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/simple-snack-bar.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/simple-snack-bar.html", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar-container.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar-container.html", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/module.ts", "../k8-fastbuild-ST-46c76129e412/bin/src/material/snack-bar/snack-bar-animations.ts", "src/app/components/posts/posts.component.ts", "src/app/components/posts/posts.component.html", "src/app/components/posts/services/posts.routes.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error(\n    'Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n      'a ComponentPortal or a TemplatePortal.',\n  );\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  TemplateRef,\n  ViewContainerRef,\n  ElementRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n} from '@angular/core';\nimport {\n  throwNullPortalOutletError,\n  throwPortalAlreadyAttachedError,\n  throwNoPortalAttachedError,\n  throwNullPortalError,\n  throwPortalOutletAlreadyDisposedError,\n  throwUnknownPortalTypeError,\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return <T>host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * @deprecated No longer in use. To be removed.\n   * @breaking-change 18.0.0\n   */\n  componentFactoryResolver?: any;\n\n  /**\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n   */\n  projectableNodes?: Node[][] | null;\n\n  constructor(\n    component: ComponentType<T>,\n    viewContainerRef?: ViewContainerRef | null,\n    injector?: Injector | null,\n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    _componentFactoryResolver?: any,\n    projectableNodes?: Node[][] | null,\n  ) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.projectableNodes = projectableNodes;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    public templateRef: TemplateRef<C>,\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    public viewContainerRef: ViewContainerRef,\n    /** Contextual data to be passed in to the embedded view. */\n    public context?: C,\n    /** The injector to use for the embedded view. */\n    public injector?: Injector,\n  ) {\n    super();\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  override attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  override detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n/** A `PortalOutlet` is a space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  EnvironmentInjector,\n  Injector,\n  NgModuleRef,\n  createComponent,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, DomPortal, TemplatePortal} from './portal';\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  private _document: Document;\n\n  /**\n   * @param outletElement Element into which the content is projected.\n   * @param _unusedComponentFactoryResolver Used to resolve the component factory.\n   *   Only required when attaching component portals.\n   * @param _appRef Reference to the application. Only used in component portals when there\n   *   is no `ViewContainerRef` available.\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n   *   have one. Only used for component portals.\n   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n   *   become a required parameter.\n   */\n  constructor(\n    /** Element into which the content is projected. */\n    public outletElement: Element,\n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    _unusedComponentFactoryResolver?: any,\n    private _appRef?: ApplicationRef,\n    private _defaultInjector?: Injector,\n\n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document?: any,\n  ) {\n    super();\n    this._document = _document;\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      const injector = portal.injector || portal.viewContainerRef.injector;\n      const ngModuleRef = injector.get(NgModuleRef, null, {optional: true}) || undefined;\n\n      componentRef = portal.viewContainerRef.createComponent(portal.component, {\n        index: portal.viewContainerRef.length,\n        injector,\n        ngModuleRef,\n        projectableNodes: portal.projectableNodes || undefined,\n      });\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n      const appRef = this._appRef!;\n\n      const elementInjector = portal.injector || this._defaultInjector || Injector.NULL;\n      const environmentInjector = elementInjector.get(EnvironmentInjector, appRef.injector);\n      componentRef = createComponent(portal.component, {\n        elementInjector,\n        environmentInjector,\n        projectableNodes: portal.projectableNodes || undefined,\n      });\n\n      appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (appRef.viewCount > 0) {\n          appRef.detachView(componentRef.hostView);\n        }\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n\n    this._attachedPortal = portal;\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    element.parentNode!.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  override dispose(): void {\n    super.dispose();\n    this.outletElement.remove();\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Input,\n  inject,\n  NgModuleRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const templateRef = inject<TemplateRef<any>>(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [\n    {\n      provide: CdkPortal,\n      useExisting: TemplatePortalDirective,\n    },\n  ],\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _moduleRef = inject(NgModuleRef, {optional: true});\n  private _document = inject(DOCUMENT);\n  private _viewContainerRef = inject(ViewContainerRef);\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n  }\n\n  /** Portal associated with the Portal outlet. */\n  @Input('cdkPortalOutlet')\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null | undefined | '') {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal || null;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() readonly attached: EventEmitter<CdkPortalOutletAttachedRef> =\n    new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef =\n      portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n\n    const ref = viewContainerRef.createComponent(portal.component, {\n      index: viewContainerRef.length,\n      injector: portal.injector || viewContainerRef.injector,\n      projectableNodes: portal.projectableNodes || undefined,\n      ngModuleRef: this._moduleRef || undefined,\n    });\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode!.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (\n      nativeElement.nodeType === nativeElement.ELEMENT_NODE\n        ? nativeElement\n        : nativeElement.parentNode!\n    ) as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: [{name: 'portal', alias: 'cdkPortalHost'}],\n  providers: [\n    {\n      provide: CdkPortalOutlet,\n      useExisting: PortalHostDirective,\n    },\n  ],\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n@NgModule({\n  imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class LayoutModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset:\n    '(max-width: 599.98px) and (orientation: portrait), ' +\n    '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet:\n    '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n    '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web:\n    '(min-width: 840px) and (orientation: portrait), ' +\n    '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../../scrolling';\nimport {coerceCssPixelValue} from '../../coercion';\nimport {supportsScrollBehavior} from '../../platform';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: {top: number; left: number};\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    document: any,\n  ) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const rootElement = this._document.documentElement;\n    const viewport = this._viewportRuler.getViewportSize();\n    return rootElement.scrollHeight > viewport.height || rootElement.scrollWidth > viewport.width;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayRef) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '../../scrolling';\nimport {filter} from 'rxjs/operators';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0).pipe(\n      filter(scrollable => {\n        return (\n          !scrollable ||\n          !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement)\n        );\n      }),\n    );\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/** Equivalent of `DOMRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<DOMRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {ScrollDispatcher, ViewportRuler} from '../../scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '../../scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, NgZone, inject} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _scrollDispatcher = inject(ScrollDispatcher);\n  private _viewportRuler = inject(ViewportRuler);\n  private _ngZone = inject(NgZone);\n\n  private _document = inject(DOCUMENT);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) =>\n    new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) =>\n    new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '../bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config) as Iterable<keyof OverlayConfig> &\n        (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[],\n  ) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n    /** The position used as a result of this change. */\n    public connectionPair: ConnectionPositionPair,\n    /** @docs-private */\n    public scrollableViewProperties: ScrollingVisibility,\n  ) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"top\", \"bottom\" or \"center\".`,\n    );\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"start\", \"end\" or \"center\".`,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, OnDestroy, inject} from '@angular/core';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  protected _document = inject(DOCUMENT);\n  protected _isAttached: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {}\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, RendererFactory2, inject} from '@angular/core';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  private _ngZone = inject(NgZone);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupKeydown: (() => void) | undefined;\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._ngZone.runOutsideAngular(() => {\n        this._cleanupKeydown = this._renderer.listen('body', 'keydown', this._keydownListener);\n      });\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._cleanupKeydown?.();\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        this._ngZone.run(() => overlays[i]._keydownEvents.next(event));\n        break;\n      }\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, RendererFactory2, inject} from '@angular/core';\nimport {Platform, _bindEventWithOptions, _getEventTarget} from '../../platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n  private _pointerDownEventTarget: HTMLElement | null;\n  private _cleanups: (() => void)[] | undefined;\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n      const eventOptions = {capture: true};\n\n      this._cleanups = this._ngZone.runOutsideAngular(() => [\n        _bindEventWithOptions(\n          this._renderer,\n          body,\n          'pointerdown',\n          this._pointerDownListener,\n          eventOptions,\n        ),\n        _bindEventWithOptions(this._renderer, body, 'click', this._clickListener, eventOptions),\n        _bindEventWithOptions(this._renderer, body, 'auxclick', this._clickListener, eventOptions),\n        _bindEventWithOptions(\n          this._renderer,\n          body,\n          'contextmenu',\n          this._clickListener,\n          eventOptions,\n        ),\n      ]);\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._cleanups?.forEach(cleanup => cleanup());\n      this._cleanups = undefined;\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        this._document.body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  /** Store pointerdown event target to track origin of click. */\n  private _pointerDownListener = (event: PointerEvent) => {\n    this._pointerDownEventTarget = _getEventTarget<HTMLElement>(event);\n  };\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    const target = _getEventTarget<HTMLElement>(event);\n    // In case of a click event, we want to check the origin of the click\n    // (e.g. in case where a user starts a click inside the overlay and\n    // releases the click outside of it).\n    // This is done by using the event target of the preceding pointerdown event.\n    // Every click event caused by a pointer device has a preceding pointerdown\n    // event, unless the click was programmatically triggered (e.g. in a unit test).\n    const origin =\n      event.type === 'click' && this._pointerDownEventTarget\n        ? this._pointerDownEventTarget\n        : target;\n    // Reset the stored pointerdown event target, to avoid having it interfere\n    // in subsequent events.\n    this._pointerDownEventTarget = null;\n\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n      // and proceed with the next overlay\n      if (\n        containsPierceShadowDom(overlayRef.overlayElement, target) ||\n        containsPierceShadowDom(overlayRef.overlayElement, origin)\n      ) {\n        break;\n      }\n\n      const outsidePointerEvents = overlayRef._outsidePointerEvents;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.run(() => outsidePointerEvents.next(event));\n      } else {\n        outsidePointerEvents.next(event);\n      }\n    }\n  };\n}\n\n/** Version of `Element.contains` that transcends shadow DOM boundaries. */\nfunction containsPierceShadowDom(parent: HTMLElement, child: HTMLElement | null): boolean {\n  const supportsShadowRoot = typeof ShadowRoot !== 'undefined' && ShadowRoot;\n  let current: Node | null = child;\n\n  while (current) {\n    if (current === parent) {\n      return true;\n    }\n\n    current =\n      supportsShadowRoot && current instanceof ShadowRoot ? current.host : current.parentNode;\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Injectable,\n  OnDestroy,\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {Platform, _isTestEnvironment} from '../platform';\n\n@Component({\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrl: 'overlay-structure.css',\n  host: {'cdk-overlay-style-loader': ''},\n})\nexport class _CdkOverlayStyleLoader {}\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _platform = inject(Platform);\n\n  protected _containerElement: HTMLElement;\n  protected _document = inject(DOCUMENT);\n  protected _styleLoader = inject(_CdkPrivateStyleLoader);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnDestroy() {\n    this._containerElement?.remove();\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    this._loadStyles();\n\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(\n        `.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`,\n      );\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n\n  /** Loads the structural styles necessary for the overlay to work. */\n  protected _loadStyles(): void {\n    this._styleLoader.load(_CdkOverlayStyleLoader);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgZone, Renderer2} from '@angular/core';\n\n/** Encapsulates the logic for attaching and detaching a backdrop. */\nexport class BackdropRef {\n  readonly element: HTMLElement;\n  private _cleanupClick: (() => void) | undefined;\n  private _cleanupTransitionEnd: (() => void) | undefined;\n  private _fallbackTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  constructor(\n    document: Document,\n    private _renderer: Renderer2,\n    private _ngZone: NgZone,\n    onClick: (event: MouseEvent) => void,\n  ) {\n    this.element = document.createElement('div');\n    this.element.classList.add('cdk-overlay-backdrop');\n    this._cleanupClick = _renderer.listen(this.element, 'click', onClick);\n  }\n\n  detach() {\n    this._ngZone.runOutsideAngular(() => {\n      const element = this.element;\n      clearTimeout(this._fallbackTimeout);\n      this._cleanupTransitionEnd?.();\n      this._cleanupTransitionEnd = this._renderer.listen(element, 'transitionend', this.dispose);\n      this._fallbackTimeout = setTimeout(this.dispose, 500);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      element.style.pointerEvents = 'none';\n      element.classList.remove('cdk-overlay-backdrop-showing');\n    });\n  }\n\n  dispose = () => {\n    clearTimeout(this._fallbackTimeout);\n    this._cleanupClick?.();\n    this._cleanupTransitionEnd?.();\n    this._cleanupClick = this._cleanupTransitionEnd = this._fallbackTimeout = undefined;\n    this.element.remove();\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction, Directionality} from '../bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '../portal';\nimport {\n  AfterRenderRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  EnvironmentInjector,\n  NgZone,\n  Renderer2,\n  afterNextRender,\n  afterRender,\n  untracked,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '../coercion';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\nimport {BackdropRef} from './backdrop-ref';\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet {\n  private readonly _backdropClick = new Subject<MouseEvent>();\n  private readonly _attachments = new Subject<void>();\n  private readonly _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropRef: BackdropRef | null = null;\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  readonly _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  readonly _outsidePointerEvents = new Subject<MouseEvent>();\n\n  private _renders = new Subject<void>();\n\n  private _afterRenderRef: AfterRenderRef;\n\n  /** Reference to the currently-running `afterNextRender` call. */\n  private _afterNextRenderRef: AfterRenderRef | undefined;\n\n  constructor(\n    private _portalOutlet: PortalOutlet,\n    private _host: HTMLElement,\n    private _pane: HTMLElement,\n    private _config: ImmutableObject<OverlayConfig>,\n    private _ngZone: NgZone,\n    private _keyboardDispatcher: OverlayKeyboardDispatcher,\n    private _document: Document,\n    private _location: Location,\n    private _outsideClickDispatcher: OverlayOutsideClickDispatcher,\n    private _animationsDisabled = false,\n    private _injector: EnvironmentInjector,\n    private _renderer: Renderer2,\n  ) {\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n\n    // Users could open the overlay from an `effect`, in which case we need to\n    // run the `afterRender` as `untracked`. We don't recommend that users do\n    // this, but we also don't want to break users who are doing it.\n    this._afterRenderRef = untracked(() =>\n      afterRender(\n        () => {\n          this._renders.next();\n        },\n        {injector: this._injector},\n      ),\n    );\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropRef?.element || null;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    const attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // We need to clean this up ourselves, because we're passing in an\n    // `EnvironmentInjector` below which won't ever be destroyed.\n    // Otherwise it causes some callbacks to be retained (see #29696).\n    this._afterNextRenderRef?.destroy();\n\n    // Update the position once the overlay is fully rendered before attempting to position it,\n    // as the position may depend on the size of the rendered content.\n    this._afterNextRenderRef = afterNextRender(\n      () => {\n        // The overlay could've been detached before the callback executed.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      },\n      {injector: this._injector},\n    );\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n    if (typeof attachResult?.onDestroy === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenEmpty();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this._backdropRef?.dispose();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n    this._host?.remove();\n    this._afterNextRenderRef?.destroy();\n    this._previousHostParent = this._pane = this._host = this._backdropRef = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n    this._afterRenderRef.destroy();\n    this._renders.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropRef?.dispose();\n    this._backdropRef = new BackdropRef(this._document, this._renderer, this._ngZone, event => {\n      this._backdropClick.next(event);\n    });\n\n    if (this._animationsDisabled) {\n      this._backdropRef.element.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropRef.element, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropRef.element, this._host);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._backdropRef?.element.classList.add(showingClass));\n      });\n    } else {\n      this._backdropRef.element.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    if (this._animationsDisabled) {\n      this._backdropRef?.dispose();\n      this._backdropRef = null;\n    } else {\n      this._backdropRef?.detach();\n    }\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenEmpty() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._renders\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._host.remove();\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n    scrollStrategy?.disable();\n    scrollStrategy?.detach?.();\n  }\n}\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '../../scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '../../coercion';\nimport {Platform} from '../../platform';\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayRef} from '../overlay-ref';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin =\n  | ElementRef\n  | Element\n  | (Point & {\n      width?: number;\n      height?: number;\n    });\n\n/** Equivalent of `DOMRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<DOMRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: Dimensions;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: Dimensions;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: Dimensions;\n\n  /** Cached container dimensions */\n  private _containerRect: Dimensions;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** The last calculated scroll visibility. Only tracked  */\n  private _lastScrollVisibility: ScrollingVisibility | null;\n\n  /** Subject that emits whenever the position changes. */\n  private readonly _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number; y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: FlexibleConnectedPositionStrategyOrigin,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    private _platform: Platform,\n    private _overlayContainer: OverlayContainer,\n  ) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    if (\n      this._overlayRef &&\n      overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n          fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    const lastPosition = this._lastPosition;\n\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(\n    originRect: Dimensions,\n    containerRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n\n    return {x, y};\n  }\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n    originPoint: Point,\n    overlayRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(\n    point: Point,\n    rawOverlayRect: Dimensions,\n    viewport: Dimensions,\n    position: ConnectedPosition,\n  ): OverlayFit {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: Dimensions) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit =\n        fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit =\n        fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(\n    start: Point,\n    rawOverlayRect: Dimensions,\n    scrollPosition: ViewportScrollPosition,\n  ): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y,\n      };\n    }\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollVisibility = this._getScrollVisibility();\n\n      // We're recalculating on scroll, but we only want to emit if anything\n      // changed since downstream code might be hitting the `NgZone`.\n      if (\n        position !== this._lastPosition ||\n        !this._lastScrollVisibility ||\n        !compareScrollVisibility(this._lastScrollVisibility, scrollVisibility)\n      ) {\n        const changeEvent = new ConnectedOverlayPositionChange(position, scrollVisibility);\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._lastScrollVisibility = scrollVisibility;\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> = this._boundingBox!.querySelectorAll(\n      this._transformOriginSelector,\n    );\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `DOMRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.bottom - origin.y + viewport.top,\n        origin.y,\n      );\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n      (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n      (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin * 2;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.right - origin.x + viewport.left,\n        origin.x,\n      );\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds = this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): Dimensions {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin,\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the DOMRect of the current origin. */\n  private _getOriginRect(): Dimensions {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width,\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurements determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: Dimensions;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: Dimensions;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(\n  destination: CSSStyleDeclaration,\n  source: CSSStyleDeclaration,\n): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number | string | null | undefined): number | null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `DOMRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `DOMRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect: Dimensions): Dimensions {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height),\n  };\n}\n\n/** Returns whether two `ScrollingVisibility` objects are identical. */\nfunction compareScrollVisibility(a: ScrollingVisibility, b: ScrollingVisibility): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  return (\n    a.isOriginClipped === b.isOriginClipped &&\n    a.isOriginOutsideView === b.isOriginOutsideView &&\n    a.isOverlayClipped === b.isOverlayClipped &&\n    a.isOverlayOutsideView === b.isOverlayOutsideView\n  );\n}\n\nexport const STANDARD_DROPDOWN_BELOW_POSITIONS: ConnectedPosition[] = [\n  {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n  {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'},\n  {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom'},\n];\n\nexport const STANDARD_DROPDOWN_ADJACENT_POSITIONS: ConnectedPosition[] = [\n  {originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top'},\n  {originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top'},\n  {originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom'},\n];\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OverlayRef} from '../overlay-ref';\nimport {PositionStrategy} from './position-strategy';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n  private _cssPosition = 'static';\n  private _topOffset = '';\n  private _bottomOffset = '';\n  private _alignItems = '';\n  private _xPosition = '';\n  private _xOffset = '';\n  private _width = '';\n  private _height = '';\n  private _isDisposed = false;\n\n  attach(overlayRef: OverlayRef): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  start(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  end(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally =\n      (width === '100%' || width === '100vw') &&\n      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically =\n      (height === '100%' || height === '100vh') &&\n      (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent =\n      parentStyles.alignItems =\n      styles.marginTop =\n      styles.marginBottom =\n      styles.marginLeft =\n      styles.marginRight =\n      styles.position =\n        '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../../platform';\nimport {ViewportRuler} from '../../scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, inject} from '@angular/core';\nimport {OverlayContainer} from '../overlay-container';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  private _viewportRuler = inject(ViewportRuler);\n  private _document = inject(DOCUMENT);\n  private _platform = inject(Platform);\n  private _overlayContainer = inject(OverlayContainer);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(\n    origin: FlexibleConnectedPositionStrategyOrigin,\n  ): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(\n      origin,\n      this._viewportRuler,\n      this._document,\n      this._platform,\n      this._overlayContainer,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../bidi';\nimport {DomPortalOutlet} from '../portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  Injectable,\n  Injector,\n  NgZone,\n  ANIMATION_MODULE_TYPE,\n  EnvironmentInjector,\n  inject,\n  RendererFactory2,\n} from '@angular/core';\nimport {_IdGenerator} from '../a11y';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {_CdkOverlayStyleLoader, OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable({providedIn: 'root'})\nexport class Overlay {\n  scrollStrategies = inject(ScrollStrategyOptions);\n  private _overlayContainer = inject(OverlayContainer);\n  private _positionBuilder = inject(OverlayPositionBuilder);\n  private _keyboardDispatcher = inject(OverlayKeyboardDispatcher);\n  private _injector = inject(Injector);\n  private _ngZone = inject(NgZone);\n  private _document = inject(DOCUMENT);\n  private _directionality = inject(Directionality);\n  private _location = inject(Location);\n  private _outsideClickDispatcher = inject(OverlayOutsideClickDispatcher);\n  private _animationsModuleType = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _idGenerator = inject(_IdGenerator);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  private _appRef: ApplicationRef;\n  private _styleLoader = inject(_CdkPrivateStyleLoader);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    // This is done in the overlay container as well, but we have it here\n    // since it's common to mock out the overlay container in tests.\n    this._styleLoader.load(_CdkOverlayStyleLoader);\n\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(\n      portalOutlet,\n      host,\n      pane,\n      overlayConfig,\n      this._ngZone,\n      this._keyboardDispatcher,\n      this._document,\n      this._location,\n      this._outsideClickDispatcher,\n      this._animationsModuleType === 'NoopAnimations',\n      this._injector.get(EnvironmentInjector),\n      this._renderer,\n    );\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = this._idGenerator.getId('cdk-overlay-');\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, null, this._appRef, this._injector, this._document);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction, Directionality} from '../bidi';\nimport {ESCAPE, hasModifierKey} from '../keycodes';\nimport {TemplatePortal} from '../portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {_getEventTarget} from '../platform';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './position/flexible-connected-position-strategy';\nimport {RepositionScrollStrategy, ScrollStrategy} from './scroll/index';\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n  },\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'cdk-connected-overlay-scroll-strategy',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const overlay = inject(Overlay);\n      return () => overlay.scrollStrategies.reposition();\n    },\n  },\n);\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  elementRef = inject(ElementRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay',\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlay = inject(Overlay);\n  private _dir = inject(Directionality, {optional: true});\n\n  private _overlayRef: OverlayRef | undefined;\n  private _templatePortal: TemplatePortal;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory = inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY);\n  private _disposeOnNavigation = false;\n  private _ngZone = inject(NgZone);\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin')\n  origin: CdkOverlayOrigin | FlexibleConnectedPositionStrategyOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number {\n    return this._offsetX;\n  }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() {\n    return this._offsetY;\n  }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string | string[];\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input({alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute})\n  hasBackdrop: boolean = false;\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input({alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute})\n  lockPosition: boolean = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input({alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute})\n  flexibleDimensions: boolean = false;\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input({alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute})\n  growAfterOpen: boolean = false;\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input({alias: 'cdkConnectedOverlayPush', transform: booleanAttribute}) push: boolean = false;\n\n  /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n  @Input({alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute})\n  get disposeOnNavigation(): boolean {\n    return this._disposeOnNavigation;\n  }\n  set disposeOnNavigation(value: boolean) {\n    this._disposeOnNavigation = value;\n  }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() readonly positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() readonly attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() readonly detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() readonly overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() readonly overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  constructor(...args: unknown[]);\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor() {\n    const templateRef = inject<TemplateRef<any>>(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef!;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._overlayRef?.dispose();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef?.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this.attachOverlay() : this.detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      const origin = this._getOriginElement();\n      const target = _getEventTarget(event) as Element | null;\n\n      if (!origin || (origin !== target && !origin.contains(target))) {\n        this.overlayOutsideClick.next(event);\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = (this._position =\n      this.positionStrategy || this._createPositionStrategy());\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir || 'ltr',\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop,\n      disposeOnNavigation: this.disposeOnNavigation,\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this._getOrigin())\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getOrigin());\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  private _getOrigin(): FlexibleConnectedPositionStrategyOrigin {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n\n  private _getOriginElement(): Element | null {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef.nativeElement;\n    }\n\n    if (this.origin instanceof ElementRef) {\n      return this.origin.nativeElement;\n    }\n\n    if (typeof Element !== 'undefined' && this.origin instanceof Element) {\n      return this.origin;\n    }\n\n    return null;\n  }\n\n  /** Attaches the overlay. */\n  attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef!.hasAttached()) {\n      this._overlayRef!.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef!.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this._ngZone.run(() => this.positionChange.emit(position));\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n\n    this.open = true;\n  }\n\n  /** Detaches the overlay. */\n  detachOverlay() {\n    this._overlayRef?.detach();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this.open = false;\n  }\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BidiModule} from '../bidi';\nimport {PortalModule} from '../portal';\nimport {ScrollingModule} from '../scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n})\nexport class OverlayModule {}\n\n// Re-export needed by the Angular compiler.\n// See: https://github.com/angular/components/issues/30663.\n// Note: These exports need to be stable and shouldn't be renamed unnecessarily because\n// consuming libraries might have references to them in their own partial compilation output.\nexport {\n  CdkScrollableModule as ɵɵCdkScrollableModule,\n  CdkFixedSizeVirtualScroll as ɵɵCdkFixedSizeVirtualScroll,\n  CdkVirtualForOf as ɵɵCdkVirtualForOf,\n  CdkVirtualScrollViewport as ɵɵCdkVirtualScrollViewport,\n  CdkVirtualScrollableWindow as ɵɵCdkVirtualScrollableWindow,\n  CdkVirtualScrollableElement as ɵɵCdkVirtualScrollableElement,\n} from '../scrolling';\nexport {Dir as ɵɵDir} from '../bidi';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: ReturnType<typeof setTimeout>;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(\n    containerInstance: MatSnackBarContainer,\n    private _overlayRef: OverlayRef,\n  ) {\n    this.containerInstance = containerInstance;\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n      this.dismiss();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed;\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\n@Directive({\n  selector: `[matSnackBarLabel]`,\n  host: {\n    'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n  },\n})\nexport class MatSnackBarLabel {}\n\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\n@Directive({\n  selector: `[matSnackBarActions]`,\n  host: {\n    'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n  },\n})\nexport class MatSnackBarActions {}\n\n/** Directive that should be applied to each of the snack bar's action buttons. */\n@Directive({\n  selector: `[matSnackBarAction]`,\n  host: {\n    'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n  },\n})\nexport class MatSnackBarAction {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation, inject} from '@angular/core';\nimport {MatButton} from '../button';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MatSnackBarAction, MatSnackBarActions, MatSnackBarLabel} from './snack-bar-content';\n\n/**\n * Interface for a simple snack bar component that has a message and a single action.\n */\nexport interface TextOnlySnackBar {\n  data: {message: string; action: string};\n  snackBarRef: MatSnackBarRef<TextOnlySnackBar>;\n  action: () => void;\n  hasAction: boolean;\n}\n\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrl: 'simple-snack-bar.css',\n  exportAs: 'matSnackBar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [MatButton, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction],\n  host: {\n    'class': 'mat-mdc-simple-snack-bar',\n  },\n})\nexport class SimpleSnackBar implements TextOnlySnackBar {\n  snackBarRef = inject<MatSnackBarRef<SimpleSnackBar>>(MatSnackBarRef);\n  data = inject(MAT_SNACK_BAR_DATA);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n", "<div matSnackBarLabel>\n  {{data.message}}\n</div>\n\n@if (hasAction) {\n  <div matSnackBarActions>\n    <button mat-button matSnackBarAction (click)=\"action()\">\n      {{data.action}}\n    </button>\n  </div>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  afterRender,\n  AfterRenderRef,\n  ANIMATION_MODULE_TYPE,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  inject,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  DomPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {Observable, Subject, of} from 'rxjs';\nimport {_IdGenerator, AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {take} from 'rxjs/operators';\n\nconst ENTER_ANIMATION = '_mat-snack-bar-enter';\nconst EXIT_ANIMATION = '_mat-snack-bar-exit';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'mat-snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrl: 'snack-bar-container.css',\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  imports: [CdkPortalOutlet],\n  host: {\n    'class': 'mdc-snackbar mat-mdc-snack-bar-container',\n    '[class.mat-snack-bar-container-enter]': '_animationState === \"visible\"',\n    '[class.mat-snack-bar-container-exit]': '_animationState === \"hidden\"',\n    '[class.mat-snack-bar-container-animations-enabled]': '!_animationsDisabled',\n    '(animationend)': 'onAnimationEnd($event.animationName)',\n    '(animationcancel)': 'onAnimationEnd($event.animationName)',\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _platform = inject(Platform);\n  private _rendersRef: AfterRenderRef;\n  protected _animationsDisabled =\n    inject(ANIMATION_MODULE_TYPE, {optional: true}) === 'NoopAnimations';\n  snackBarConfig = inject(MatSnackBarConfig);\n\n  private _document = inject(DOCUMENT);\n  private _trackedModals = new Set<Element>();\n  private _enterFallback: ReturnType<typeof setTimeout> | undefined;\n  private _exitFallback: ReturnType<typeof setTimeout> | undefined;\n  private _renders = new Subject<void>();\n\n  /** The number of milliseconds to wait before announcing the snack bar's content. */\n  private readonly _announceDelay: number = 150;\n\n  /** The timeout for announcing the snack bar's content. */\n  private _announceTimeoutId: ReturnType<typeof setTimeout>;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has announced to screen readers. */\n  readonly _onAnnounce: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<void> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** aria-live value for the live region. */\n  _live: AriaLivePoliteness;\n\n  /**\n   * Element that will have the `mdc-snackbar__label` class applied if the attached component\n   * or template does not have it. This ensures that the appropriate structure, typography, and\n   * color is applied to the attached view.\n   */\n  @ViewChild('label', {static: true}) _label: ElementRef;\n\n  /**\n   * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n   * JAWS does not read out aria-live message.\n   */\n  _role?: 'status' | 'alert';\n\n  /** Unique ID of the aria-live element. */\n  readonly _liveElementId = inject(_IdGenerator).getId('mat-snack-bar-container-live-');\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const config = this.snackBarConfig;\n\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (config.politeness === 'assertive' && !config.announcementMessage) {\n      this._live = 'assertive';\n    } else if (config.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n\n    // Note: ideally we'd just do an `afterNextRender` in the places where we need to delay\n    // something, however in some cases (TestBed teardown) the injector can be destroyed at an\n    // unexpected time, causing the `afterRender` to fail.\n    this._rendersRef = afterRender(() => this._renders.next(), {manualCleanup: true});\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    const result = this._portalOutlet.attachComponentPortal(portal);\n    this._afterPortalAttached();\n    return result;\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n    this._afterPortalAttached();\n    return result;\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    const result = this._portalOutlet.attachDomPortal(portal);\n    this._afterPortalAttached();\n    return result;\n  };\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(animationName: string) {\n    if (animationName === EXIT_ANIMATION) {\n      this._completeExit();\n    } else if (animationName === ENTER_ANIMATION) {\n      clearTimeout(this._enterFallback);\n      this._ngZone.run(() => {\n        this._onEnter.next();\n        this._onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      // _animationState lives in host bindings and `detectChanges` does not refresh host bindings\n      // so we have to call `markForCheck` to ensure the host view is refreshed eventually.\n      this._changeDetectorRef.markForCheck();\n      this._changeDetectorRef.detectChanges();\n      this._screenReaderAnnounce();\n\n      if (this._animationsDisabled) {\n        this._renders.pipe(take(1)).subscribe(() => {\n          this._ngZone.run(() => queueMicrotask(() => this.onAnimationEnd(ENTER_ANIMATION)));\n        });\n      } else {\n        clearTimeout(this._enterFallback);\n        this._enterFallback = setTimeout(() => {\n          // The snack bar will stay invisible if it fails to animate. Add a fallback class so it\n          // becomes visible. This can happen in some apps that do `* {animation: none !important}`.\n          this._elementRef.nativeElement.classList.add('mat-snack-bar-fallback-visible');\n          this.onAnimationEnd(ENTER_ANIMATION);\n        }, 200);\n      }\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    if (this._destroyed) {\n      return of(undefined);\n    }\n\n    // It's common for snack bars to be opened by random outside calls like HTTP requests or\n    // errors. Run inside the NgZone to ensure that it functions correctly.\n    this._ngZone.run(() => {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n\n      // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n      this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n      // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n      clearTimeout(this._announceTimeoutId);\n\n      if (this._animationsDisabled) {\n        this._renders.pipe(take(1)).subscribe(() => {\n          this._ngZone.run(() => queueMicrotask(() => this.onAnimationEnd(EXIT_ANIMATION)));\n        });\n      } else {\n        clearTimeout(this._exitFallback);\n        this._exitFallback = setTimeout(() => this.onAnimationEnd(EXIT_ANIMATION), 200);\n      }\n    });\n\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._clearFromModals();\n    this._completeExit();\n    this._renders.complete();\n    this._rendersRef.destroy();\n  }\n\n  private _completeExit() {\n    clearTimeout(this._exitFallback);\n    queueMicrotask(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /**\n   * Called after the portal contents have been attached. Can be\n   * used to modify the DOM once it's guaranteed to be in place.\n   */\n  private _afterPortalAttached() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    this._exposeToModals();\n\n    // Check to see if the attached component or template uses the MDC template structure,\n    // specifically the MDC label. If not, the container should apply the MDC label class to this\n    // component's label container, which will apply MDC's label styles to the attached view.\n    const label = this._label.nativeElement;\n    const labelClass = 'mdc-snackbar__label';\n    label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live element if there is an\n   * `aria-modal` and the live element is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live element.\n   */\n  private _exposeToModals() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n    // `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const id = this._liveElementId;\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n      this._trackedModals.add(modal);\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n\n  /** Clears the references to the live element from any modals it was added to. */\n  private _clearFromModals() {\n    this._trackedModals.forEach(modal => {\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (ariaOwns) {\n        const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n\n        if (newValue.length > 0) {\n          modal.setAttribute('aria-owns', newValue);\n        } else {\n          modal.removeAttribute('aria-owns');\n        }\n      }\n    });\n    this._trackedModals.clear();\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  private _screenReaderAnnounce() {\n    if (this._announceTimeoutId) {\n      return;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._announceTimeoutId = setTimeout(() => {\n        if (this._destroyed) {\n          return;\n        }\n\n        const element = this._elementRef.nativeElement;\n        const inertElement = element.querySelector('[aria-hidden]');\n        const liveElement = element.querySelector('[aria-live]');\n\n        if (inertElement && liveElement) {\n          // If an element in the snack bar content is focused before being moved\n          // track it and restore focus after moving to the live region.\n          let focusedElement: HTMLElement | null = null;\n          if (\n            this._platform.isBrowser &&\n            document.activeElement instanceof HTMLElement &&\n            inertElement.contains(document.activeElement)\n          ) {\n            focusedElement = document.activeElement;\n          }\n\n          inertElement.removeAttribute('aria-hidden');\n          liveElement.appendChild(inertElement);\n          focusedElement?.focus();\n\n          this._onAnnounce.next();\n          this._onAnnounce.complete();\n        }\n      }, this._announceDelay);\n    });\n  }\n}\n", "<div class=\"mdc-snackbar__surface mat-mdc-snackbar-surface\">\n  <!--\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\n    the attached template/component does not contain it.\n  -->\n  <div class=\"mat-mdc-snack-bar-label\" #label>\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\n    <div aria-hidden=\"true\">\n      <ng-template cdkPortalOutlet />\n    </div>\n\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\n    <div [attr.aria-live]=\"_live\" [attr.role]=\"_role\" [attr.id]=\"_liveElementId\"></div>\n  </div>\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {ComponentType, Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  inject,\n} from '@angular/core';\nimport {SimpleSnackBar, TextOnlySnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {ComponentPortal, TemplatePortal} from '@angular/cdk/portal';\nimport {takeUntil} from 'rxjs/operators';\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken<MatSnackBarConfig>(\n  'mat-snack-bar-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSnackBar implements OnDestroy {\n  private _overlay = inject(Overlay);\n  private _live = inject(LiveAnnouncer);\n  private _injector = inject(Injector);\n  private _breakpointObserver = inject(BreakpointObserver);\n  private _parentSnackBar = inject(MatSnackBar, {optional: true, skipSelf: true});\n  private _defaultConfig = inject<MatSnackBarConfig>(MAT_SNACK_BAR_DEFAULT_OPTIONS);\n\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** The component that should be rendered as the snack bar's simple component. */\n  simpleSnackBarComponent = SimpleSnackBar;\n\n  /** The container component that attaches the provided template or component. */\n  snackBarContainerComponent = MatSnackBarContainer;\n\n  /** The CSS class to apply for handset mode. */\n  handsetCssClass = 'mat-mdc-snack-bar-handset';\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T, D = any>(\n    component: ComponentType<T>,\n    config?: MatSnackBarConfig<D>,\n  ): MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(\n    template: TemplateRef<any>,\n    config?: MatSnackBarConfig,\n  ): MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(\n    message: string,\n    action: string = '',\n    config?: MatSnackBarConfig,\n  ): MatSnackBarRef<TextOnlySnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(\n    overlayRef: OverlayRef,\n    config: MatSnackBarConfig,\n  ): MatSnackBarContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatSnackBarConfig, useValue: config}],\n    });\n\n    const containerPortal = new ComponentPortal(\n      this.snackBarContainerComponent,\n      config.viewContainerRef,\n      injector,\n    );\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(\n    content: ComponentType<T> | TemplateRef<T>,\n    userConfig?: MatSnackBarConfig,\n  ): MatSnackBarRef<T | EmbeddedViewRef<any>> {\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef,\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver\n      .observe(Breakpoints.HandsetPortrait)\n      .pipe(takeUntil(overlayRef.detachments()))\n      .subscribe(state => {\n        overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n      });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage!, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft =\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl);\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(config: MatSnackBarConfig, snackBarRef: MatSnackBarRef<T>): Injector {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [\n        {provide: MatSnackBarRef, useValue: snackBarRef},\n        {provide: MAT_SNACK_BAR_DATA, useValue: config.data},\n      ],\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '../button';\nimport {MatCommonModule} from '../core';\n\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarAction, MatSnackBarActions, MatSnackBarLabel} from './snack-bar-content';\nimport {MatSnackBar} from './snack-bar';\n\nconst DIRECTIVES = [MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction];\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    MatButtonModule,\n    MatCommonModule,\n    SimpleSnackBar,\n    ...DIRECTIVES,\n  ],\n  exports: [MatCommonModule, ...DIRECTIVES],\n  providers: [MatSnackBar],\n})\nexport class MatSnackBarModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: any;\n} = {\n  // Represents\n  // trigger('state', [\n  //   state(\n  //     'void, hidden',\n  //     style({\n  //       transform: 'scale(0.8)',\n  //       opacity: 0,\n  //     }),\n  //   ),\n  //   state(\n  //     'visible',\n  //     style({\n  //       transform: 'scale(1)',\n  //       opacity: 1,\n  //     }),\n  //   ),\n  //   transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n  //   transition(\n  //     '* => void, * => hidden',\n  //     animate(\n  //       '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n  //       style({\n  //         opacity: 0,\n  //       }),\n  //     ),\n  //   ),\n  // ])\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: {\n    type: 7,\n    name: 'state',\n    'definitions': [\n      {\n        type: 0,\n        name: 'void, hidden',\n        styles: {type: 6, styles: {transform: 'scale(0.8)', opacity: 0}, offset: null},\n      },\n      {\n        type: 0,\n        name: 'visible',\n        styles: {type: 6, styles: {transform: 'scale(1)', opacity: 1}, offset: null},\n      },\n      {\n        type: 1,\n        expr: '* => visible',\n        animation: {type: 4, styles: null, timings: '150ms cubic-bezier(0, 0, 0.2, 1)'},\n        options: null,\n      },\n      {\n        type: 1,\n        expr: '* => void, * => hidden',\n        animation: {\n          type: 4,\n          styles: {type: 6, styles: {opacity: 0}, offset: null},\n          timings: '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n        },\n        options: null,\n      },\n    ],\n    options: {},\n  },\n};\n", "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  ReactiveFormsModule,\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { ApiService } from '../../services/api.service';\r\nimport { Post, PostComment } from '../../models/models';\r\nimport { MATERIAL } from '../../material/material.module';\r\n\r\n@Component({\r\n  selector: 'app-posts',\r\n  standalone: true,\r\n  imports: [CommonModule, MATERIAL, ReactiveFormsModule],\r\n  templateUrl: './posts.component.html',\r\n  styleUrls: ['./posts.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PostsComponent implements OnInit {\r\n  posts: Post[] = [];\r\n  comments: Record<number, PostComment[]> = {};\r\n  expandedPostId: number | null = null;\r\n  loadingComments = false;\r\n\r\n  private api = inject(ApiService);\r\n  private snack = inject(MatSnackBar);\r\n  private cd = inject(ChangeDetectorRef);\r\n\r\n  page = 1;\r\n  pageSize = 8;\r\n  displayedPosts: Post[] = [];\r\n\r\n  private static postsCache: Post[] | null = null;\r\n\r\n  newPostForm = new FormGroup({\r\n    title: new FormControl('', Validators.required),\r\n    body: new FormControl('', Validators.required),\r\n  });\r\n\r\n  editForm = new FormGroup({\r\n    title: new FormControl('', Validators.required),\r\n    body: new FormControl('', Validators.required),\r\n  });\r\n\r\n  commentForms: Record<number, FormGroup> = {};\r\n  replyForms: Record<number, Record<number, FormGroup>> = {};\r\n\r\n  showNewPostForm = false;\r\n  editingPostId: number | null = null;\r\n  editingPostIndex: number | null = null;\r\n  activeCommentPostId: number | null = null;\r\n  replyingTo: number | null = null;\r\n\r\n  postingPost = false;\r\n  postingComment: Record<number, boolean> = {};\r\n  postingReply: Record<string, boolean> = {};\r\n\r\n  ngOnInit() {\r\n    const tokenNow = sessionStorage.getItem('gorest_token');\r\n    if (tokenNow) {\r\n      this.loadPosts();\r\n      return;\r\n    }\r\n\r\n    const attempts = 5;\r\n    const intervalMs = 200;\r\n    let tries = 0;\r\n\r\n    const checkToken = () => {\r\n      tries++;\r\n      const t = sessionStorage.getItem('gorest_token');\r\n      if (t) {\r\n        this.loadPosts();\r\n        return;\r\n      }\r\n      if (tries < attempts) {\r\n        setTimeout(checkToken, intervalMs);\r\n      } else {\r\n        this.loadPosts();\r\n      }\r\n    };\r\n\r\n    checkToken();\r\n  }\r\n\r\n  get totalPages(): number {\r\n    return Math.max(1, Math.ceil(this.posts.length / this.pageSize));\r\n  }\r\n\r\n  private applyPagination() {\r\n    const start = (this.page - 1) * this.pageSize;\r\n    this.displayedPosts = this.posts.slice(start, start + this.pageSize);\r\n  }\r\n\r\n  goToPage(n: number) {\r\n    if (n < 1) return;\r\n    const max = this.totalPages;\r\n    if (n > max) return;\r\n    this.page = n;\r\n    this.applyPagination();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  private loadPosts() {\r\n    if (PostsComponent.postsCache) {\r\n      this.posts = PostsComponent.postsCache;\r\n      this.setupFormsForPosts();\r\n      this.applyPagination();\r\n      this.cd.markForCheck();\r\n      return;\r\n    }\r\n\r\n    this.api.getPosts().subscribe({\r\n      next: (data) => {\r\n        this.posts = Array.isArray(data) ? data : [];\r\n        PostsComponent.postsCache = this.posts;\r\n        this.setupFormsForPosts();\r\n        this.applyPagination();\r\n        this.cd.markForCheck();\r\n      },\r\n      error: () => {\r\n        this.snack.open('Failed to load posts', 'Close', { duration: 3000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private setupFormsForPosts() {\r\n    this.posts.forEach((p) => {\r\n      if (!this.commentForms[p.id]) {\r\n        this.commentForms[p.id] = new FormGroup({\r\n          name: new FormControl('', Validators.required),\r\n          body: new FormControl('', Validators.required),\r\n        });\r\n      }\r\n      this.replyForms[p.id] = this.replyForms[p.id] || {};\r\n    });\r\n  }\r\n\r\n  startEdit(post: Post) {\r\n    this.editingPostId = post.id;\r\n    this.editingPostIndex = this.posts.findIndex((p) => p.id === post.id);\r\n    this.editForm.setValue({\r\n      title: post.title ?? '',\r\n      body: post.body ?? '',\r\n    });\r\n  }\r\n\r\n  submitEdit(postId: number) {\r\n    if (this.editForm.invalid) return;\r\n    const idx =\r\n      this.editingPostIndex ?? this.posts.findIndex((p) => p.id === postId);\r\n    if (idx !== -1) {\r\n      const updated = {\r\n        ...this.posts[idx],\r\n        title: this.editForm.value.title!,\r\n        body: this.editForm.value.body!,\r\n      };\r\n      this.posts = [\r\n        ...this.posts.slice(0, idx),\r\n        updated,\r\n        ...this.posts.slice(idx + 1),\r\n      ];\r\n      PostsComponent.postsCache = this.posts;\r\n      this.applyPagination();\r\n      this.cd.markForCheck();\r\n    }\r\n    this.editingPostId = null;\r\n    this.editingPostIndex = null;\r\n    this.editForm.reset();\r\n  }\r\n\r\n  submitNewPost() {\r\n    if (this.newPostForm.invalid || this.postingPost) return;\r\n    const token = sessionStorage.getItem('gorest_token');\r\n    if (!token) return;\r\n    const tempId = Date.now();\r\n    const localPost: Post = {\r\n      id: tempId,\r\n      title: this.newPostForm.value.title!,\r\n      body: this.newPostForm.value.body!,\r\n      likes: 0,\r\n    };\r\n\r\n    this.posts = [localPost, ...this.posts];\r\n    PostsComponent.postsCache = this.posts;\r\n    this.applyPagination();\r\n    this.cd.markForCheck();\r\n\r\n    this.postingPost = true;\r\n\r\n    this.api\r\n      .createPost({ title: localPost.title, body: localPost.body })\r\n      .pipe(finalize(() => (this.postingPost = false)))\r\n      .subscribe({\r\n        next: (created) => {\r\n          const idx = this.posts.findIndex((p) => p.id === tempId);\r\n          if (idx !== -1) {\r\n            this.posts = [\r\n              ...this.posts.slice(0, idx),\r\n              created,\r\n              ...this.posts.slice(idx + 1),\r\n            ];\r\n            PostsComponent.postsCache = this.posts;\r\n            this.applyPagination();\r\n            this.cd.markForCheck();\r\n          }\r\n          this.commentForms[created.id] = new FormGroup({\r\n            name: new FormControl('', Validators.required),\r\n            body: new FormControl('', Validators.required),\r\n          });\r\n          this.replyForms[created.id] = {};\r\n          this.newPostForm.reset();\r\n          this.showNewPostForm = false;\r\n          this.snack.open('Post published', 'Close', { duration: 2500 });\r\n        },\r\n        error: (err) => {\r\n          this.posts = this.posts.filter((p) => p.id !== tempId);\r\n          PostsComponent.postsCache = this.posts;\r\n          this.applyPagination();\r\n          this.cd.markForCheck();\r\n          this.snack.open('Failed to publish post', 'Close', {\r\n            duration: 4000,\r\n          });\r\n          console.error(err);\r\n        },\r\n      });\r\n  }\r\n\r\n  prepareNewComment(postId: number) {\r\n    if (this.activeCommentPostId === postId) {\r\n      this.activeCommentPostId = null;\r\n      return;\r\n    }\r\n    this.activeCommentPostId = postId;\r\n    if (!this.commentForms[postId]) {\r\n      this.commentForms[postId] = new FormGroup({\r\n        name: new FormControl('', Validators.required),\r\n        body: new FormControl('', Validators.required),\r\n      });\r\n    } else {\r\n      this.commentForms[postId].reset();\r\n    }\r\n  }\r\n\r\n  submitComment(postId: number) {\r\n    const form = this.commentForms[postId];\r\n    if (!form || form.invalid || this.postingComment[postId]) return;\r\n\r\n    const tempId = Date.now();\r\n    const local: PostComment = {\r\n      id: tempId,\r\n      post_id: postId,\r\n      name: form.value.name!,\r\n      email: 'user@example.com',\r\n      body: form.value.body!,\r\n      likes: 0,\r\n    };\r\n\r\n    this.comments[postId] = [...(this.comments[postId] || []), local];\r\n    this.postingComment[postId] = true;\r\n    this.cd.markForCheck();\r\n\r\n    this.api\r\n      .createComment(postId, {\r\n        name: local.name,\r\n        body: local.body,\r\n        email: local.email,\r\n      })\r\n      .pipe(finalize(() => (this.postingComment[postId] = false)))\r\n      .subscribe({\r\n        next: (created) => {\r\n          this.comments[postId] = this.comments[postId].map((c) =>\r\n            c.id === tempId ? created : c\r\n          );\r\n          this.snack.open('Comment added', 'Close', { duration: 2000 });\r\n          form.reset();\r\n          this.activeCommentPostId = null;\r\n          this.cd.markForCheck();\r\n        },\r\n        error: (err) => {\r\n          this.comments[postId] = this.comments[postId].filter(\r\n            (c) => c.id !== tempId\r\n          );\r\n          this.snack.open('Failed to add comment', 'Close', { duration: 3500 });\r\n          console.error(err);\r\n          this.cd.markForCheck();\r\n        },\r\n      });\r\n  }\r\n\r\n  replyToComment(postId: number, parentComment: PostComment) {\r\n    this.replyingTo = parentComment.id;\r\n    if (!this.replyForms[postId]) this.replyForms[postId] = {};\r\n    if (!this.replyForms[postId][parentComment.id]) {\r\n      this.replyForms[postId][parentComment.id] = new FormGroup({\r\n        name: new FormControl('', Validators.required),\r\n        body: new FormControl('', Validators.required),\r\n      });\r\n    } else {\r\n      this.replyForms[postId][parentComment.id].reset();\r\n    }\r\n  }\r\n\r\n  submitReply(postId: number, parentId: number) {\r\n    const form = this.replyForms[postId]?.[parentId];\r\n    const key = `${postId}_${parentId}`;\r\n    if (!form || form.invalid || this.postingReply[key]) return;\r\n\r\n    const tempId = Date.now();\r\n    const localReply: PostComment = {\r\n      id: tempId,\r\n      post_id: postId,\r\n      parent_id: parentId,\r\n      name: form.value.name!,\r\n      email: 'user@example.com',\r\n      body: form.value.body!,\r\n      likes: 0,\r\n    };\r\n\r\n    this.comments[postId] = [...(this.comments[postId] || []), localReply];\r\n    this.postingReply[key] = true;\r\n    this.cd.markForCheck();\r\n\r\n    this.api\r\n      .createReply(postId, parentId, {\r\n        name: localReply.name,\r\n        body: localReply.body,\r\n        email: localReply.email,\r\n      })\r\n      .pipe(finalize(() => (this.postingReply[key] = false)))\r\n      .subscribe({\r\n        next: (created) => {\r\n          this.comments[postId] = this.comments[postId].map((c) =>\r\n            c.id === tempId ? created : c\r\n          );\r\n          this.snack.open('Reply sent', 'Close', { duration: 2000 });\r\n          form.reset();\r\n          this.replyingTo = null;\r\n          this.cd.markForCheck();\r\n        },\r\n        error: (err) => {\r\n          this.comments[postId] = this.comments[postId].filter(\r\n            (c) => c.id !== tempId\r\n          );\r\n          this.snack.open('Failed to send reply', 'Close', { duration: 3500 });\r\n          console.error(err);\r\n          this.cd.markForCheck();\r\n        },\r\n      });\r\n  }\r\n\r\n  toggleComments(postId: number) {\r\n    if (this.expandedPostId === postId) {\r\n      this.expandedPostId = null;\r\n      return;\r\n    }\r\n    this.expandedPostId = postId;\r\n    if (!this.comments[postId]) {\r\n      this.loadingComments = true;\r\n      this.api.getCommentsByPost(postId).subscribe({\r\n        next: (data) => {\r\n          this.comments[postId] = Array.isArray(data) ? data : [];\r\n          this.loadingComments = false;\r\n          (this.comments[postId] || []).forEach((c) => {\r\n            if (!this.replyForms[postId]) this.replyForms[postId] = {};\r\n            if (!this.replyForms[postId][c.id]) {\r\n              this.replyForms[postId][c.id] = new FormGroup({\r\n                name: new FormControl('', Validators.required),\r\n                body: new FormControl('', Validators.required),\r\n              });\r\n            }\r\n          });\r\n          this.cd.markForCheck();\r\n        },\r\n        error: (err) => {\r\n          this.loadingComments = false;\r\n          this.snack.open('Failed to load comments', 'Close', {\r\n            duration: 3000,\r\n          });\r\n          console.error(err);\r\n          this.cd.markForCheck();\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  likePost(postId: number) {\r\n    const idx = this.posts.findIndex((p) => p.id === postId);\r\n    if (idx === -1) return;\r\n    const updated = {\r\n      ...this.posts[idx],\r\n      likes: (this.posts[idx].likes || 0) + 1,\r\n    };\r\n    this.posts = [\r\n      ...this.posts.slice(0, idx),\r\n      updated,\r\n      ...this.posts.slice(idx + 1),\r\n    ];\r\n    PostsComponent.postsCache = this.posts;\r\n    this.applyPagination();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  likeComment(postId: number, comment: PostComment) {\r\n    comment.likes = (comment.likes || 0) + 1;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  trackByPostId(index: number, post: Post) {\r\n    return post.id;\r\n  }\r\n}\r\n", "<div class=\"posts-wrapper\">\r\n  <div class=\"new-post-toggle\">\r\n    <button\r\n      class=\"expand-btn\"\r\n      [class.expand-btn-open]=\"showNewPostForm\"\r\n      (click)=\"showNewPostForm = !showNewPostForm\"\r\n    >\r\n      {{ showNewPostForm ? \"Close New Post\" : \"Insert a New Post\" }}\r\n    </button>\r\n\r\n    <div class=\"new-post-form\" *ngIf=\"showNewPostForm\">\r\n      <h3>Insert a new post</h3>\r\n      <form [formGroup]=\"newPostForm\" (ngSubmit)=\"submitNewPost()\">\r\n        <input\r\n          formControlName=\"title\"\r\n          placeholder=\"Post title\"\r\n          [class.invalid]=\"\r\n            newPostForm.get('title')?.invalid &&\r\n            newPostForm.get('title')?.touched\r\n          \"\r\n        />\r\n        <textarea\r\n          formControlName=\"body\"\r\n          placeholder=\"Post content\"\r\n          [class.invalid]=\"\r\n            newPostForm.get('body')?.invalid && newPostForm.get('body')?.touched\r\n          \"\r\n        ></textarea>\r\n        <button\r\n          type=\"submit\"\r\n          class=\"submit-btn\"\r\n          [disabled]=\"newPostForm.invalid\"\r\n        >\r\n          Publish\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"pagination\" *ngIf=\"posts.length > pageSize\">\r\n    <button (click)=\"goToPage(page - 1)\" [disabled]=\"page === 1\">← Prev</button>\r\n    <span>Page {{ page }} / {{ totalPages }}</span>\r\n    <button\r\n      (click)=\"goToPage(page + 1)\"\r\n      [disabled]=\"page * pageSize >= posts.length\"\r\n    >\r\n      Next →\r\n    </button>\r\n  </div>\r\n\r\n  <div\r\n    class=\"posts-card\"\r\n    *ngFor=\"let post of displayedPosts; trackBy: trackByPostId\"\r\n  >\r\n    <button class=\"edit-icon\" (click)=\"startEdit(post)\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n\r\n    <h2 class=\"post-title\">{{ post.title }}</h2>\r\n    <p class=\"post-body\">{{ post.body }}</p>\r\n\r\n    <div class=\"post-actions\">\r\n      <button class=\"action-btn\" (click)=\"toggleComments(post.id)\">\r\n        {{ expandedPostId === post.id ? \"Hide Comments\" : \"Show Comments\" }}\r\n      </button>\r\n      <button class=\"action-btn\" (click)=\"likePost(post.id)\">\r\n        ❤️ Like Post {{ post.likes || 0 }}\r\n      </button>\r\n      <button class=\"action-btn\" (click)=\"prepareNewComment(post.id)\">\r\n        Add Comment\r\n      </button>\r\n    </div>\r\n\r\n    <form\r\n      *ngIf=\"activeCommentPostId === post.id && commentForms[post.id]\"\r\n      [formGroup]=\"commentForms[post.id]\"\r\n      (ngSubmit)=\"submitComment(post.id)\"\r\n      class=\"comment-form\"\r\n    >\r\n      <input formControlName=\"name\" placeholder=\"Your name\" />\r\n      <textarea\r\n        formControlName=\"body\"\r\n        placeholder=\"Write a comment...\"\r\n      ></textarea>\r\n      <button\r\n        type=\"submit\"\r\n        class=\"submit-btn\"\r\n        [disabled]=\"commentForms[post.id].invalid\"\r\n      >\r\n        Send\r\n      </button>\r\n    </form>\r\n\r\n    <div class=\"comments\" *ngIf=\"expandedPostId === post.id\">\r\n      <p *ngIf=\"loadingComments && !comments[post.id]\">Loading comments...</p>\r\n      <p *ngIf=\"comments[post.id]?.length === 0\">No comments yet.</p>\r\n\r\n      <ng-container *ngFor=\"let comment of comments[post.id] || []\">\r\n        <div class=\"comment\" *ngIf=\"!comment.parent_id\">\r\n          <strong>{{ comment.name }}</strong>\r\n          <p>{{ comment.body }}</p>\r\n\r\n          <div class=\"comment-actions\">\r\n            <button (click)=\"likeComment(post.id, comment)\">\r\n              ❤️ {{ comment.likes || 0 }}\r\n            </button>\r\n            <button (click)=\"replyToComment(post.id, comment)\">↩️ Reply</button>\r\n          </div>\r\n\r\n          <div *ngIf=\"replyingTo === comment.id\">\r\n            <form\r\n              *ngIf=\"replyForms[post.id]?.[comment.id]\"\r\n              [formGroup]=\"replyForms[post.id][comment.id]\"\r\n              (ngSubmit)=\"submitReply(post.id, comment.id)\"\r\n              class=\"reply-form\"\r\n            >\r\n              <input formControlName=\"name\" placeholder=\"Your name\" />\r\n              <textarea\r\n                formControlName=\"body\"\r\n                placeholder=\"Write a reply...\"\r\n              ></textarea>\r\n              <button\r\n                class=\"submit-btn\"\r\n                type=\"submit\"\r\n                [disabled]=\"replyForms[post.id][comment.id].invalid\"\r\n              >\r\n                Send Reply\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n          <ng-container *ngFor=\"let reply of comments[post.id] || []\">\r\n            <div class=\"reply-comment\" *ngIf=\"reply.parent_id === comment.id\">\r\n              <strong>{{ reply.name }}</strong>\r\n              <p>{{ reply.body }}</p>\r\n              <div class=\"comment-actions\">\r\n                <button (click)=\"likeComment(post.id, reply)\">\r\n                  ❤️ {{ reply.likes || 0 }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <div *ngIf=\"editingPostId === post.id\" class=\"edit-form\">\r\n      <form [formGroup]=\"editForm\" (ngSubmit)=\"submitEdit(post.id)\">\r\n        <input formControlName=\"title\" placeholder=\"Edit title\" />\r\n        <textarea formControlName=\"body\" placeholder=\"Edit content\"></textarea>\r\n        <button type=\"submit\" class=\"submit-btn\" [disabled]=\"editForm.invalid\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" class=\"cancel-btn\" (click)=\"editingPostId = null\">\r\n          Cancel\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"pagination\" *ngIf=\"posts.length > pageSize\">\r\n    <button (click)=\"goToPage(page - 1)\" [disabled]=\"page === 1\">← Prev</button>\r\n    <span>Page {{ page }} / {{ totalPages }}</span>\r\n    <button\r\n      (click)=\"goToPage(page + 1)\"\r\n      [disabled]=\"page * pageSize >= posts.length\"\r\n    >\r\n      Next →\r\n    </button>\r\n  </div>\r\n</div>\r\n", "import { Routes } from \"@angular/router\";\r\nimport { PostsComponent } from \"../posts.component\";\r\n\r\nexport const routes: Routes = [\r\n  { path: '', component: PostsComponent }\r\n];\r\n"],
  "mappings": "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",
  "names": ["Portal", "_attachedHost", "attach", "host", "detach", "isAttached", "setAttachedHost", "ComponentPortal", "component", "viewContainerRef", "injector", "componentFactoryResolver", "projectableNodes", "constructor", "_componentFactoryResolver", "TemplatePortal", "templateRef", "context", "origin", "elementRef", "undefined", "DomPortal", "element", "ElementRef", "nativeElement", "BasePortalOutlet", "_attachedPortal", "_disposeFn", "_isDisposed", "hasAttached", "portal", "attachComponentPortal", "attachTemplatePortal", "attachDomPortal", "_invokeDisposeFn", "dispose", "setDisposeFn", "fn", "DomPortalOutlet", "BasePortalOutlet", "outletElement", "_appRef", "_defaultInjector", "_document", "constructor", "_unusedComponentFactoryResolver", "attachComponentPortal", "portal", "componentRef", "viewContainerRef", "injector", "ngModuleRef", "get", "NgModuleRef", "optional", "undefined", "createComponent", "component", "index", "length", "projectableNodes", "setDisposeFn", "destroy", "appRef", "elementInjector", "Injector", "NULL", "environmentInjector", "EnvironmentInjector", "attachView", "hostView", "viewCount", "detachView", "appendChild", "_getComponentRootNode", "_attachedPortal", "attachTemplatePortal", "viewContainer", "viewRef", "createEmbeddedView", "templateRef", "context", "rootNodes", "forEach", "rootNode", "detectChanges", "indexOf", "remove", "attachDomPortal", "element", "parentNode", "anchorNode", "createComment", "insertBefore", "replaceChild", "dispose", "CdkPortalOutlet", "BasePortalOutlet", "_moduleRef", "inject", "NgModuleRef", "optional", "_document", "DOCUMENT", "_viewContainerRef", "ViewContainerRef", "_isInitialized", "_attachedRef", "constructor", "portal", "_attachedPortal", "hasAttached", "detach", "attach", "attached", "EventEmitter", "attachedRef", "ngOnInit", "ngOnDestroy", "dispose", "attachComponentPortal", "setAttachedHost", "viewContainerRef", "ref", "createComponent", "component", "index", "length", "injector", "projectableNodes", "undefined", "ngModuleRef", "_getRootNode", "appendChild", "hostView", "rootNodes", "setDisposeFn", "destroy", "emit", "attachTemplatePortal", "viewRef", "createEmbeddedView", "templateRef", "context", "clear", "attachDomPortal", "element", "parentNode", "anchorNode", "createComment", "insertBefore", "replaceChild", "nativeElement", "nodeType", "ELEMENT_NODE", "selectors", "inputs", "outputs", "exportAs", "features", "\u0275\u0275InheritDefinitionFeature", "Breakpoints", "XSmall", "Small", "Medium", "Large", "XLarge", "Handset", "Tablet", "Web", "HandsetPortrait", "TabletPortrait", "WebPortrait", "HandsetLandscape", "TabletLandscape", "WebLandscape", "scrollBehaviorSupported", "supportsScrollBehavior", "BlockScrollStrategy", "_viewportRuler", "_previousHTMLStyles", "top", "left", "_previousScrollPosition", "_isEnabled", "_document", "constructor", "document", "attach", "enable", "_canBeEnabled", "root", "documentElement", "getViewportScrollPosition", "style", "coerceCssPixelValue", "classList", "add", "disable", "html", "body", "htmlStyle", "bodyStyle", "previousHtmlScrollBehavior", "scrollBehavior", "previousBodyScrollBehavior", "remove", "window", "scroll", "contains", "rootElement", "viewport", "getViewportSize", "scrollHeight", "height", "scrollWidth", "width", "CloseScrollStrategy", "_scrollDispatcher", "_ngZone", "_viewportRuler", "_config", "_scrollSubscription", "_overlayRef", "_initialScrollPosition", "constructor", "attach", "overlayRef", "enable", "stream", "scrolled", "pipe", "filter", "scrollable", "overlayElement", "contains", "getElementRef", "nativeElement", "threshold", "getViewportScrollPosition", "top", "subscribe", "scrollPosition", "Math", "abs", "_detach", "updatePosition", "disable", "unsubscribe", "detach", "hasAttached", "run", "NoopScrollStrategy", "isElementScrolledOutsideView", "element", "scrollContainers", "some", "containerBounds", "outsideAbove", "bottom", "outsideBelow", "outsideLeft", "right", "left", "outsideRight", "isElementClippedByScrolling", "scrollContainerRect", "clippedAbove", "clippedBelow", "clippedLeft", "clippedRight", "RepositionScrollStrategy", "throttle", "scrollThrottle", "autoClose", "overlayRect", "getBoundingClientRect", "width", "height", "getViewportSize", "ScrollStrategyOptions", "inject", "ScrollDispatcher", "ViewportRuler", "NgZone", "_document", "DOCUMENT", "noop", "close", "config", "block", "BlockScrollStrategy", "reposition", "\u0275prov", "\u0275\u0275defineInjectable", "factory", "\u0275fac", "providedIn", "OverlayConfig", "positionStrategy", "scrollStrategy", "panelClass", "hasBackdrop", "backdropClass", "minWidth", "minHeight", "maxWidth", "maxHeight", "direction", "disposeOnNavigation", "configKeys", "Object", "keys", "key", "undefined", "ConnectedOverlayPositionChange", "connectionPair", "scrollableViewProperties", "constructor", "BaseOverlayDispatcher", "_attachedOverlays", "_document", "inject", "DOCUMENT", "_isAttached", "constructor", "ngOnDestroy", "detach", "add", "overlayRef", "remove", "push", "index", "indexOf", "splice", "length", "\u0275prov", "\u0275\u0275defineInjectable", "factory", "\u0275fac", "providedIn", "OverlayKeyboardDispatcher", "_ngZone", "NgZone", "_renderer", "RendererFactory2", "createRenderer", "_cleanupKeydown", "runOutsideAngular", "listen", "_keydownListener", "event", "overlays", "i", "_keydownEvents", "observers", "run", "next", "__ngFactoryType__", "OverlayOutsideClickDispatcher", "_platform", "Platform", "_cursorOriginalValue", "_cursorStyleIsSet", "_pointerDownEventTarget", "_cleanups", "body", "eventOptions", "capture", "_bindEventWithOptions", "_pointerDownListener", "_clickListener", "IOS", "style", "cursor", "forEach", "cleanup", "undefined", "_getEventTarget", "target", "origin", "type", "slice", "_outsidePointerEvents", "hasAttached", "containsPierceShadowDom", "overlayElement", "outsidePointerEvents", "parent", "child", "supportsShadowRoot", "ShadowRoot", "current", "host", "parentNode", "_CdkOverlayStyleLoader", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "hostAttrs", "decls", "vars", "template", "rf", "ctx", "styles", "encapsulation", "changeDetection", "OverlayContainer", "_containerElement", "_styleLoader", "_CdkPrivateStyleLoader", "getContainerElement", "_loadStyles", "_createContainer", "containerClass", "isBrowser", "_isTestEnvironment", "oppositePlatformContainers", "querySelectorAll", "container", "createElement", "classList", "setAttribute", "appendChild", "load", "BackdropRef", "element", "_cleanupClick", "_cleanupTransitionEnd", "_fallbackTimeout", "document", "onClick", "clearTimeout", "dispose", "setTimeout", "pointerEvents", "OverlayRef", "_portalOutlet", "_host", "_pane", "_config", "_keyboardDispatcher", "_location", "_outsideClickDispatcher", "_animationsDisabled", "_injector", "_backdropClick", "Subject", "_attachments", "_detachments", "_positionStrategy", "_scrollStrategy", "_locationChanges", "Subscription", "EMPTY", "_backdropRef", "_previousHostParent", "_renders", "_afterRenderRef", "_afterNextRenderRef", "scrollStrategy", "attach", "positionStrategy", "untracked", "afterRender", "injector", "backdropElement", "hostElement", "portal", "parentElement", "attachResult", "_updateStackingOrder", "_updateElementSize", "_updateElementDirection", "enable", "destroy", "afterNextRender", "updatePosition", "_togglePointerEvents", "hasBackdrop", "_attachBackdrop", "panelClass", "_toggleClasses", "disposeOnNavigation", "subscribe", "onDestroy", "Promise", "resolve", "then", "detachBackdrop", "disable", "detachmentResult", "_detachContentWhenEmpty", "unsubscribe", "isAttached", "_disposeScrollStrategy", "complete", "backdropClick", "attachments", "detachments", "keydownEvents", "getConfig", "apply", "updatePositionStrategy", "strategy", "updateSize", "sizeConfig", "__spreadValues", "setDirection", "dir", "__spreadProps", "direction", "addPanelClass", "classes", "removePanelClass", "getDirection", "value", "updateScrollStrategy", "width", "coerceCssPixelValue", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "enablePointer", "showingClass", "backdropClass", "insertBefore", "requestAnimationFrame", "nextSibling", "cssClasses", "isAdd", "coerceArray", "filter", "c", "subscription", "pipe", "takeUntil", "merge", "children", "boundingBoxClass", "cssUnitPattern", "FlexibleConnectedPositionStrategy", "_viewportRuler", "_overlayContainer", "_overlayRef", "_isInitialRender", "_lastBoundingBoxSize", "_isPushed", "_canPush", "_growAfterOpen", "_hasFlexibleDimensions", "_positionLocked", "_originRect", "_overlayRect", "_viewportRect", "_containerRect", "_viewportMargin", "_scrollables", "_preferredPositions", "_origin", "_isDisposed", "_boundingBox", "_lastPosition", "_lastScrollVisibility", "_positionChanges", "_resizeSubscription", "_offsetX", "_offsetY", "_transformOriginSelector", "_appliedPanelClasses", "_previousPushAmount", "positionChanges", "positions", "connectedTo", "setOrigin", "_validatePositions", "change", "reapplyLastPosition", "_clearPanelClasses", "_resetOverlayElementStyles", "_resetBoundingBoxStyles", "_getNarrowedViewportRect", "_getOriginRect", "getBoundingClientRect", "originRect", "overlayRect", "viewportRect", "containerRect", "flexibleFits", "fallback", "pos", "originPoint", "_getOriginPoint", "overlayPoint", "_getOverlayPoint", "overlayFit", "_getOverlayFit", "isCompletelyWithinViewport", "_applyPosition", "_canFitWithFlexibleDimensions", "position", "boundingBoxRect", "_calculateBoundingBoxRect", "visibleArea", "bestFit", "bestScore", "fit", "score", "weight", "extendStyles", "top", "left", "right", "bottom", "alignItems", "justifyContent", "lastPosition", "withScrollableContainers", "scrollables", "withPositions", "withViewportMargin", "margin", "withFlexibleDimensions", "flexibleDimensions", "withGrowAfterOpen", "growAfterOpen", "withPush", "canPush", "withLockedPosition", "isLocked", "withDefaultOffsetX", "offset", "withDefaultOffsetY", "withTransformOriginOn", "selector", "x", "originX", "startX", "_isRtl", "endX", "y", "originY", "overlayStartX", "overlayX", "overlayStartY", "overlayY", "point", "rawOverlayRect", "viewport", "overlay", "getRoundedBoundingClientRect", "offsetX", "_getOffset", "offsetY", "leftOverflow", "rightOverflow", "topOverflow", "bottomOverflow", "visibleWidth", "_subtractOverflows", "visibleHeight", "fitsInViewportVertically", "fitsInViewportHorizontally", "availableHeight", "availableWidth", "getPixelValue", "verticalFit", "horizontalFit", "_pushOverlayOnScreen", "start", "scrollPosition", "overflowRight", "Math", "max", "overflowBottom", "overflowTop", "overflowLeft", "pushX", "pushY", "_setTransformOrigin", "_setOverlayElementStyles", "_setBoundingBoxStyles", "_addPanelClasses", "scrollVisibility", "_getScrollVisibility", "compareScrollVisibility", "changeEvent", "ConnectedOverlayPositionChange", "elements", "xOrigin", "yOrigin", "transformOrigin", "isRtl", "smallestDistanceToViewportEdge", "min", "previousHeight", "isBoundedByRightViewportEdge", "isBoundedByLeftViewportEdge", "previousWidth", "_hasExactPosition", "transform", "hasExactPosition", "hasFlexibleDimensions", "config", "getViewportScrollPosition", "_getExactOverlayY", "_getExactOverlayX", "transformString", "trim", "documentHeight", "documentElement", "clientHeight", "horizontalStyleProperty", "documentWidth", "clientWidth", "originBounds", "overlayBounds", "scrollContainerBounds", "map", "scrollable", "getElementRef", "nativeElement", "isOriginClipped", "isElementClippedByScrolling", "isOriginOutsideView", "isElementScrolledOutsideView", "isOverlayClipped", "isOverlayOutsideView", "overflows", "reduce", "currentValue", "currentOverflow", "axis", "cssClass", "ElementRef", "Element", "destination", "source", "key", "hasOwnProperty", "input", "units", "split", "parseFloat", "clientRect", "floor", "a", "b", "wrapperClass", "GlobalPositionStrategy", "_overlayRef", "_cssPosition", "_topOffset", "_bottomOffset", "_alignItems", "_xPosition", "_xOffset", "_width", "_height", "_isDisposed", "attach", "overlayRef", "config", "getConfig", "width", "updateSize", "height", "hostElement", "classList", "add", "top", "value", "left", "bottom", "right", "start", "end", "centerHorizontally", "offset", "centerVertically", "apply", "hasAttached", "styles", "overlayElement", "style", "parentStyles", "maxWidth", "maxHeight", "shouldBeFlushHorizontally", "shouldBeFlushVertically", "xPosition", "xOffset", "isRtl", "direction", "marginLeft", "marginRight", "justifyContent", "position", "marginTop", "marginBottom", "alignItems", "dispose", "parent", "remove", "OverlayPositionBuilder", "_viewportRuler", "inject", "ViewportRuler", "_document", "DOCUMENT", "_platform", "Platform", "_overlayContainer", "OverlayContainer", "constructor", "global", "flexibleConnectedTo", "origin", "FlexibleConnectedPositionStrategy", "\u0275prov", "\u0275\u0275defineInjectable", "factory", "\u0275fac", "providedIn", "Overlay", "scrollStrategies", "ScrollStrategyOptions", "_positionBuilder", "_keyboardDispatcher", "OverlayKeyboardDispatcher", "_injector", "Injector", "_ngZone", "NgZone", "_directionality", "Directionality", "_location", "Location", "_outsideClickDispatcher", "OverlayOutsideClickDispatcher", "_animationsModuleType", "ANIMATION_MODULE_TYPE", "optional", "_idGenerator", "_IdGenerator", "_renderer", "RendererFactory2", "createRenderer", "_appRef", "_styleLoader", "_CdkPrivateStyleLoader", "create", "load", "_CdkOverlayStyleLoader", "host", "_createHostElement", "pane", "_createPaneElement", "portalOutlet", "_createPortalOutlet", "overlayConfig", "OverlayConfig", "OverlayRef", "get", "EnvironmentInjector", "createElement", "id", "getId", "appendChild", "getContainerElement", "ApplicationRef", "DomPortalOutlet", "SimpleSnackBar_Conditional_2_Template", "rf", "ctx", "_r1", "\u0275\u0275getCurrentView", "ctx_r1", "action", "\u0275\u0275nextContext", "_c0", "MatSnackBarContainer_ng_template_4_Template", "MAX_TIMEOUT", "Math", "pow", "MatSnackBarRef", "_overlayRef", "instance", "containerInstance", "_afterDismissed", "Subject", "_afterOpened", "_onAction", "_durationTimeoutId", "_dismissedByAction", "constructor", "_onExit", "subscribe", "_finishDismiss", "dismiss", "closed", "exit", "clearTimeout", "dismissWithAction", "next", "complete", "closeWithAction", "_dismissAfter", "duration", "setTimeout", "min", "_open", "dispose", "dismissedByAction", "afterDismissed", "afterOpened", "_onEnter", "onAction", "MAT_SNACK_BAR_DATA", "InjectionToken", "MatSnackBarConfig", "politeness", "announcementMessage", "viewContainerRef", "panelClass", "direction", "data", "horizontalPosition", "verticalPosition", "MatSnackBarLabel", "selectors", "hostAttrs", "MatSnackBarActions", "MatSnackBarAction", "SimpleSnackBar", "snackBarRef", "inject", "hasAction", "exportAs", "decls", "vars", "consts", "template", "dependencies", "MatButton", "styles", "encapsulation", "changeDetection", "ENTER_ANIMATION", "EXIT_ANIMATION", "MatSnackBarContainer", "BasePortalOutlet", "_ngZone", "NgZone", "_elementRef", "ElementRef", "_changeDetectorRef", "ChangeDetectorRef", "_platform", "Platform", "_rendersRef", "_animationsDisabled", "ANIMATION_MODULE_TYPE", "optional", "snackBarConfig", "_document", "DOCUMENT", "_trackedModals", "Set", "_enterFallback", "_exitFallback", "_renders", "_announceDelay", "_announceTimeoutId", "_destroyed", "_portalOutlet", "_onAnnounce", "_animationState", "_live", "_label", "_role", "_liveElementId", "_IdGenerator", "getId", "config", "FIREFOX", "afterRender", "manualCleanup", "attachComponentPortal", "portal", "_assertNotAttached", "result", "_afterPortalAttached", "attachTemplatePortal", "attachDomPortal", "onAnimationEnd", "animationName", "_completeExit", "run", "enter", "markForCheck", "detectChanges", "_screenReaderAnnounce", "pipe", "take", "queueMicrotask", "nativeElement", "classList", "add", "of", "undefined", "setAttribute", "ngOnDestroy", "_clearFromModals", "destroy", "element", "panelClasses", "Array", "isArray", "forEach", "cssClass", "_exposeToModals", "label", "labelClass", "toggle", "querySelector", "id", "modals", "querySelectorAll", "i", "length", "modal", "ariaOwns", "getAttribute", "indexOf", "newValue", "replace", "trim", "removeAttribute", "clear", "hasAttached", "runOutsideAngular", "inertElement", "liveElement", "focusedElement", "isBrowser", "document", "activeElement", "HTMLElement", "contains", "appendChild", "focus", "\u0275cmp", "\u0275\u0275defineComponent", "viewQuery", "CdkPortalOutlet", "$event", "features", "\u0275\u0275InheritDefinitionFeature", "MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY", "MAT_SNACK_BAR_DEFAULT_OPTIONS", "providedIn", "factory", "MatSnackBar", "_overlay", "Overlay", "LiveAnnouncer", "_injector", "Injector", "_breakpointObserver", "BreakpointObserver", "_parentSnackBar", "skipSelf", "_defaultConfig", "_snackBarRefAtThisLevel", "simpleSnackBarComponent", "snackBarContainerComponent", "handsetCssClass", "_openedSnackBarRef", "parent", "value", "openFromComponent", "component", "_attach", "openFromTemplate", "open", "message", "_config", "__spreadValues", "_attachSnackBarContainer", "overlayRef", "userInjector", "injector", "create", "providers", "provide", "useValue", "containerPortal", "ComponentPortal", "containerRef", "attach", "content", "userConfig", "_createOverlay", "container", "TemplateRef", "TemplatePortal", "$implicit", "_createInjector", "contentRef", "observe", "Breakpoints", "HandsetPortrait", "takeUntil", "detachments", "state", "overlayElement", "matches", "announce", "_animateSnackBar", "overlayConfig", "OverlayConfig", "positionStrategy", "position", "global", "isRtl", "isLeft", "isRight", "left", "right", "centerHorizontally", "top", "bottom", "\u0275prov", "\u0275\u0275defineInjectable", "\u0275fac", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submitNewPost", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "newPostForm", "\u0275\u0275classProp", "tmp_2_0", "get", "invalid", "touched", "tmp_3_0", "_r3", "goToPage", "page", "\u0275\u0275textInterpolate2", "totalPages", "pageSize", "posts", "length", "_r6", "post_r5", "$implicit", "submitComment", "id", "commentForms", "_r9", "comment_r8", "submitReply", "replyForms", "\u0275\u0275template", "PostsComponent_div_6_div_16_ng_container_3_div_1_div_10_form_1_Template", "_r10", "reply_r11", "likeComment", "\u0275\u0275textInterpolate", "name", "body", "\u0275\u0275textInterpolate1", "likes", "\u0275\u0275elementContainerStart", "PostsComponent_div_6_div_16_ng_container_3_div_1_ng_container_11_div_1_Template", "parent_id", "_r7", "replyToComment", "PostsComponent_div_6_div_16_ng_container_3_div_1_div_10_Template", "PostsComponent_div_6_div_16_ng_container_3_div_1_ng_container_11_Template", "replyingTo", "comments", "\u0275\u0275pureFunction0", "_c0", "PostsComponent_div_6_div_16_ng_container_3_div_1_Template", "PostsComponent_div_6_div_16_p_1_Template", "PostsComponent_div_6_div_16_p_2_Template", "PostsComponent_div_6_div_16_ng_container_3_Template", "loadingComments", "_r12", "submitEdit", "editingPostId", "editForm", "_r4", "startEdit", "toggleComments", "likePost", "prepareNewComment", "PostsComponent_div_6_form_15_Template", "PostsComponent_div_6_div_16_Template", "PostsComponent_div_6_div_17_Template", "title", "expandedPostId", "activeCommentPostId", "_r13", "PostsComponent", "api", "inject", "ApiService", "snack", "MatSnackBar", "cd", "ChangeDetectorRef", "displayedPosts", "postsCache", "FormGroup", "FormControl", "Validators", "required", "showNewPostForm", "editingPostIndex", "postingPost", "postingComment", "postingReply", "ngOnInit", "sessionStorage", "getItem", "loadPosts", "attempts", "intervalMs", "tries", "checkToken", "setTimeout", "Math", "max", "ceil", "applyPagination", "start", "slice", "n", "markForCheck", "setupFormsForPosts", "getPosts", "subscribe", "next", "data", "Array", "isArray", "error", "open", "duration", "forEach", "p", "post", "findIndex", "setValue", "postId", "idx", "updated", "__spreadProps", "__spreadValues", "value", "reset", "tempId", "Date", "now", "localPost", "createPost", "pipe", "finalize", "created", "err", "filter", "console", "form", "local", "post_id", "email", "createComment", "map", "c", "parentComment", "parentId", "key", "localReply", "createReply", "getCommentsByPost", "comment", "trackByPostId", "index", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "PostsComponent_div_4_Template", "PostsComponent_div_5_Template", "PostsComponent_div_6_Template", "PostsComponent_div_7_Template", "CommonModule", "NgForOf", "NgIf", "MatToolbarModule", "MatButtonModule", "MatSidenavModule", "MatIconModule", "MatIcon", "MatInputModule", "MatProgressSpinnerModule", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "RouterModule", "styles", "changeDetection", "routes", "path", "component", "PostsComponent"]
}
