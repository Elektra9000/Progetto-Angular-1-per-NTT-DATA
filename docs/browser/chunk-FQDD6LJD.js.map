{
  "version": 3,
  "sources": ["src/app/components/proponents/proponents.component.ts", "src/app/components/proponents/proponents.component.html", "src/app/components/proponents/user-detail-component/user-detail/user-detail.component.ts", "src/app/components/proponents/user-detail-component/user-detail/user-detail.component.html", "src/app/components/proponents/services/proponents.routes.ts"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MATERIAL } from '../../material/material.module';\r\nimport { ApiService, User } from '../../services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-proponents',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, MATERIAL],\r\n  templateUrl: './proponents.component.html',\r\n  styleUrls: ['./proponents.component.css'],\r\n})\r\nexport class ProponentsComponent implements OnInit {\r\n  users: User[] = [];\r\n  filtered: User[] = [];\r\n  paginatedUsers: User[] = [];\r\n  page = 1;\r\n  pageSize = 7;\r\n  searchTerm = '';\r\n  form: FormGroup;\r\n  window = window;\r\n\r\n  private api = inject(ApiService);\r\n  private fb = inject(FormBuilder);\r\n\r\n  constructor() {\r\n    this.form = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      gender: ['female', Validators.required],\r\n      status: ['active', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.api.getUsers().subscribe((data) => {\r\n      this.users = data.map((u) => ({ ...u, role: '' }));\r\n      this.filtered = [...this.users];\r\n      this.updatePagination();\r\n    });\r\n  }\r\n\r\n  updatePagination(): void {\r\n    const start = (this.page - 1) * this.pageSize;\r\n    const end = start + this.pageSize;\r\n    this.paginatedUsers = this.filtered.slice(start, end);\r\n  }\r\n\r\n  onSearchTerm(term: string): void {\r\n    this.searchTerm = term.toLowerCase();\r\n    this.filtered = this.users.filter((u) => u.name.toLowerCase().includes(this.searchTerm));\r\n    this.page = 1;\r\n    this.updatePagination();\r\n  }\r\n\r\n  goToPage(p: number): void {\r\n    this.page = p;\r\n    this.updatePagination();\r\n  }\r\n\r\n  addUser(): void {\r\n    if (this.form.valid) {\r\n      const newUser: User = { id: Date.now(), ...this.form.value };\r\n      this.users.unshift(newUser);\r\n      this.filtered = this.searchTerm.trim() === ''\r\n        ? [...this.users]\r\n        : this.users.filter((u) => u.name.toLowerCase().includes(this.searchTerm));\r\n      this.page = 1;\r\n      this.updatePagination();\r\n      this.form.reset({ gender: 'female' });\r\n    }\r\n  }\r\n\r\n  removeUser(id: number): void {\r\n    this.users = this.users.filter((u) => u.id !== id);\r\n    this.onSearchTerm(this.searchTerm);\r\n  }\r\n}\r\n", "<div class=\"proponents-wrapper\">\r\n  <h2>Users</h2>\r\n\r\n  <div class=\"controls\">\r\n    <input\r\n      #searchInput\r\n      type=\"text\"\r\n      placeholder=\"Search\"\r\n      (input)=\"onSearchTerm(searchInput.value)\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"card-container\">\r\n    <div class=\"user-card\" *ngFor=\"let user of paginatedUsers\">\r\n      <h4>\r\n        <a [routerLink]=\"['/proponents/user', user.id]\" class=\"name-link\">{{ user.name }}</a>\r\n      </h4>\r\n      <p><strong>Email:</strong> {{ user.email }}</p>\r\n      <p><strong>Genre:</strong> {{ user.gender }}</p>\r\n      <p><strong>Status:</strong> {{ user.status }}</p>\r\n      <button (click)=\"removeUser(user.id)\">Delete</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"pagination\">\r\n    <button (click)=\"goToPage(page - 1)\" [disabled]=\"page === 1\">← Prev</button>\r\n    <span>Page {{ page }}</span>\r\n    <button\r\n      (click)=\"goToPage(page + 1)\"\r\n      [disabled]=\"page * pageSize >= filtered.length\"\r\n    >\r\n      Next →\r\n    </button>\r\n  </div>\r\n\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"addUser()\" class=\"add-user-form\">\r\n    <h3>Add User</h3>\r\n\r\n    <input type=\"text\" formControlName=\"name\" placeholder=\"Name\" />\r\n    <input type=\"email\" formControlName=\"email\" placeholder=\"Email\" />\r\n\r\n    <select formControlName=\"gender\">\r\n      <option value=\"male\">Male</option>\r\n      <option value=\"female\">Female</option>\r\n    </select>\r\n\r\n    <button type=\"submit\" [disabled]=\"form.invalid\">Send</button>\r\n  </form>\r\n</div>\r\n", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MATERIAL } from '../../../../material/material.module';\r\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  gender: string;\r\n  status: string;\r\n}\r\n\r\ninterface Post {\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n  comments?: Comment[];\r\n}\r\n\r\ninterface Comment {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  body: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-user-detail',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, ReactiveFormsModule, MATERIAL],\r\n  templateUrl: './user-detail.component.html',\r\n  styleUrls: ['./user-detail.component.css'],\r\n})\r\nexport class UserDetailComponent implements OnInit {\r\n  user: User | null = null;\r\n  posts: Post[] = [];\r\n  commentForms: Record<number, FormGroup> = {};\r\n  loading = false;\r\n  error: string | null = null;\r\n\r\n  private http = inject(HttpClient);\r\n  private route = inject(ActivatedRoute);\r\n\r\n  ngOnInit(): void {\r\n    const idStr = this.route.snapshot.paramMap.get('id');\r\n    const id = idStr ? Number(idStr) : null;\r\n\r\n    if (!id) {\r\n      this.error = 'Invalid user id';\r\n      this.loading = false;\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n\r\n    this.http\r\n      .get<User>(`https://gorest.co.in/public/v2/users/${id}`)\r\n      .pipe(\r\n        catchError(err => {\r\n          console.error('Failed loading user', err);\r\n          this.error = 'Unable to load user';\r\n          return of(null);\r\n        })\r\n      )\r\n      .subscribe(user => {\r\n        this.user = user ? { ...user, name: (user.name || '').trim() } : null;\r\n      });\r\n\r\n    this.http\r\n      .get<Post[]>(`https://gorest.co.in/public/v2/users/${id}/posts`)\r\n      .pipe(\r\n        catchError(err => {\r\n          console.error('Failed loading posts', err);\r\n          return of([] as Post[]);\r\n        })\r\n      )\r\n      .subscribe(posts => {\r\n        this.posts = Array.isArray(posts) ? posts : [];\r\n\r\n        this.posts.forEach(post => {\r\n          this.commentForms[post.id] = new FormGroup({\r\n            name: new FormControl('', Validators.required),\r\n            body: new FormControl('', Validators.required),\r\n          });\r\n\r\n          this.http\r\n            .get<Comment[]>(`https://gorest.co.in/public/v2/posts/${post.id}/comments`)\r\n            .pipe(\r\n              catchError(err => {\r\n                console.error(`Failed loading comments for post ${post.id}`, err);\r\n                return of([] as Comment[]);\r\n              })\r\n            )\r\n            .subscribe(comments => {\r\n              post.comments = Array.isArray(comments) ? comments : [];\r\n            });\r\n        });\r\n\r\n        this.loading = false;\r\n      });\r\n  }\r\n\r\n  submitComment(postId: number): void {\r\n    const form = this.commentForms[postId];\r\n    if (!form || form.invalid) return;\r\n\r\n    const newComment: Comment = {\r\n      id: Date.now(),\r\n      name: form.value.name,\r\n      email: 'user@example.com',\r\n      body: form.value.body,\r\n    };\r\n\r\n    const post = this.posts.find(p => p.id === postId);\r\n    if (post) {\r\n      post.comments = [...(post.comments || []), newComment];\r\n    }\r\n\r\n    form.reset();\r\n  }\r\n}\r\n", "<div class=\"user-detail-wrapper\">\r\n  <div *ngIf=\"loading\" class=\"loading\">Loading…</div>\r\n  <div *ngIf=\"error\" class=\"error\">{{ error }}</div>\r\n\r\n  <div class=\"user-card\" *ngIf=\"user\">\r\n    <h2>{{ user.name }}</h2>\r\n    <p><strong>Email:</strong> {{ user.email }}</p>\r\n    <p><strong>Gender:</strong> {{ user.gender }}</p>\r\n    <p><strong>Status:</strong> {{ user.status }}</p>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loading && !user && !error\" class=\"no-user\">\r\n    Utente non trovato.\r\n  </div>\r\n\r\n  <div class=\"post-section\">\r\n    <h3>Posts</h3>\r\n\r\n    <div class=\"post-card\" *ngFor=\"let post of posts\">\r\n      <h4>{{ post.title }}</h4>\r\n      <p>{{ post.body }}</p>\r\n\r\n      <div class=\"comments\">\r\n        <h5>Comments</h5>\r\n\r\n        <div class=\"comment\" *ngFor=\"let comment of post.comments || []\">\r\n          <p>\r\n            <strong>{{ comment.name }}</strong\r\n            >: {{ comment.body }}\r\n          </p>\r\n        </div>\r\n\r\n        <form\r\n          *ngIf=\"commentForms[post.id]\"\r\n          [formGroup]=\"commentForms[post.id]\"\r\n          (ngSubmit)=\"submitComment(post.id)\"\r\n          class=\"comment-form\"\r\n        >\r\n          <input\r\n            formControlName=\"name\"\r\n            placeholder=\"Your name\"\r\n            [class.invalid]=\"\r\n              commentForms[post.id].get('name')?.invalid &&\r\n              commentForms[post.id].get('name')?.touched\r\n            \"\r\n          />\r\n          <textarea\r\n            formControlName=\"body\"\r\n            placeholder=\"Write a comment...\"\r\n            [class.invalid]=\"\r\n              commentForms[post.id].get('body')?.invalid &&\r\n              commentForms[post.id].get('body')?.touched\r\n            \"\r\n          ></textarea>\r\n          <button\r\n            type=\"submit\"\r\n            class=\"submit-btn\"\r\n            [disabled]=\"commentForms[post.id].invalid\"\r\n          >\r\n            Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Routes } from '@angular/router';\r\nimport { ProponentsComponent } from '../proponents.component';\r\nimport { UserDetailComponent } from '../user-detail-component/user-detail/user-detail.component';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', component: ProponentsComponent },\r\n  { path: 'user/:id', component: UserDetailComponent }\r\n];\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "user_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "removeUser", "id", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275textInterpolate", "name", "\u0275\u0275textInterpolate1", "email", "gender", "status", "ProponentsComponent", "users", "filtered", "paginatedUsers", "page", "pageSize", "searchTerm", "form", "window", "api", "inject", "ApiService", "fb", "FormBuilder", "constructor", "group", "Validators", "required", "ngOnInit", "getUsers", "subscribe", "data", "map", "u", "__spreadProps", "__spreadValues", "role", "updatePagination", "start", "end", "slice", "onSearchTerm", "term", "toLowerCase", "filter", "includes", "goToPage", "p", "addUser", "valid", "newUser", "Date", "now", "value", "unshift", "trim", "reset", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "_r1", "searchInput_r2", "\u0275\u0275reference", "\u0275\u0275template", "ProponentsComponent_div_7_Template", "i0", "\u0275\u0275element", "length", "invalid", "CommonModule", "NgForOf", "ReactiveFormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "MatToolbarModule", "MatButtonModule", "MatSidenavModule", "MatIconModule", "MatInputModule", "MatProgressSpinnerModule", "RouterModule", "RouterLink", "styles", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "ctx_r0", "error", "user", "name", "\u0275\u0275textInterpolate1", "email", "gender", "status", "comment_r2", "body", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "post_r4", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "submitComment", "id", "\u0275\u0275element", "\u0275\u0275property", "commentForms", "\u0275\u0275classProp", "tmp_4_0", "get", "invalid", "touched", "tmp_5_0", "\u0275\u0275template", "UserDetailComponent_div_8_div_8_Template", "UserDetailComponent_div_8_form_9_Template", "title", "comments", "\u0275\u0275pureFunction0", "_c0", "UserDetailComponent", "posts", "loading", "http", "inject", "HttpClient", "route", "ActivatedRoute", "ngOnInit", "idStr", "snapshot", "paramMap", "Number", "pipe", "catchError", "err", "console", "of", "subscribe", "__spreadProps", "__spreadValues", "trim", "Array", "isArray", "forEach", "post", "FormGroup", "FormControl", "Validators", "required", "postId", "form", "newComment", "Date", "now", "value", "find", "p", "reset", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "UserDetailComponent_div_1_Template", "UserDetailComponent_div_2_Template", "UserDetailComponent_div_3_Template", "UserDetailComponent_div_4_Template", "UserDetailComponent_div_8_Template", "CommonModule", "NgForOf", "NgIf", "RouterModule", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "MatToolbarModule", "MatButtonModule", "MatSidenavModule", "MatIconModule", "MatInputModule", "MatProgressSpinnerModule", "styles", "routes", "path", "component", "ProponentsComponent", "UserDetailComponent"]
}
